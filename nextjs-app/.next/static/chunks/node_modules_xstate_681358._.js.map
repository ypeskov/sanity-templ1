{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/ypeskov/Projects/CMS/Sanity3/nextjs-app/node_modules/xstate/dev/dist/xstate-dev.development.esm.js"],"sourcesContent":["// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal() {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  {\n    console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');\n  }\n}\nfunction getDevTools() {\n  const w = getGlobal();\n  if (w.__xstate__) {\n    return w.__xstate__;\n  }\n  return undefined;\n}\nfunction registerService(service) {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n}\nconst devToolsAdapter = service => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n};\n\nexport { devToolsAdapter, getGlobal, registerService };\n"],"names":[],"mappings":"AAAA,mGAAmG;;;;;;AACnG,SAAS;IACP,IAAI,OAAO,eAAe,aAAa;QACrC,OAAO;IACT;IACA,IAAI,OAAO,SAAS,aAAa;QAC/B,OAAO;IACT;IACA,IAAI,OAAO,WAAW,aAAa;QACjC,OAAO;IACT;IACA,IAAI,OAAO,WAAW,aAAa;QACjC,OAAO;IACT;IACA;QACE,QAAQ,IAAI,CAAC;IACf;AACF;AACA,SAAS;IACP,MAAM,IAAI;IACV,IAAI,EAAE,UAAU,EAAE;QAChB,OAAO,EAAE,UAAU;IACrB;IACA,OAAO;AACT;AACA,SAAS,gBAAgB,OAAO;IAC9B,IAAI,OAAO,WAAW,aAAa;QACjC;IACF;IACA,MAAM,WAAW;IACjB,IAAI,UAAU;QACZ,SAAS,QAAQ,CAAC;IACpB;AACF;AACA,MAAM,kBAAkB,CAAA;IACtB,IAAI,OAAO,WAAW,aAAa;QACjC;IACF;IACA,MAAM,WAAW;IACjB,IAAI,UAAU;QACZ,SAAS,QAAQ,CAAC;IACpB;AACF","ignoreList":[0]}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/ypeskov/Projects/CMS/Sanity3/nextjs-app/node_modules/xstate/dist/raise-1db27a82.development.esm.js"],"sourcesContent":["import { devToolsAdapter } from '../dev/dist/xstate-dev.development.esm.js';\n\nclass Mailbox {\n  constructor(_process) {\n    this._process = _process;\n    this._active = false;\n    this._current = null;\n    this._last = null;\n  }\n  start() {\n    this._active = true;\n    this.flush();\n  }\n  clear() {\n    // we can't set _current to null because we might be currently processing\n    // and enqueue following clear shouldnt start processing the enqueued item immediately\n    if (this._current) {\n      this._current.next = null;\n      this._last = this._current;\n    }\n  }\n  enqueue(event) {\n    const enqueued = {\n      value: event,\n      next: null\n    };\n    if (this._current) {\n      this._last.next = enqueued;\n      this._last = enqueued;\n      return;\n    }\n    this._current = enqueued;\n    this._last = enqueued;\n    if (this._active) {\n      this.flush();\n    }\n  }\n  flush() {\n    while (this._current) {\n      // atm the given _process is responsible for implementing proper try/catch handling\n      // we assume here that this won't throw in a way that can affect this mailbox\n      const consumed = this._current;\n      this._process(consumed.value);\n      this._current = consumed.next;\n    }\n    this._last = null;\n  }\n}\n\nconst STATE_DELIMITER = '.';\nconst TARGETLESS_KEY = '';\nconst NULL_EVENT = '';\nconst STATE_IDENTIFIER = '#';\nconst WILDCARD = '*';\nconst XSTATE_INIT = 'xstate.init';\nconst XSTATE_ERROR = 'xstate.error';\nconst XSTATE_STOP = 'xstate.stop';\n\n/**\n * Returns an event that represents an implicit event that is sent after the\n * specified `delay`.\n *\n * @param delayRef The delay in milliseconds\n * @param id The state node ID where this event is handled\n */\nfunction createAfterEvent(delayRef, id) {\n  return {\n    type: `xstate.after.${delayRef}.${id}`\n  };\n}\n\n/**\n * Returns an event that represents that a final state node has been reached in\n * the parent state node.\n *\n * @param id The final state node's parent state node `id`\n * @param output The data to pass into the event\n */\nfunction createDoneStateEvent(id, output) {\n  return {\n    type: `xstate.done.state.${id}`,\n    output\n  };\n}\n\n/**\n * Returns an event that represents that an invoked service has terminated.\n *\n * An invoked service is terminated when it has reached a top-level final state\n * node, but not when it is canceled.\n *\n * @param invokeId The invoked service ID\n * @param output The data to pass into the event\n */\nfunction createDoneActorEvent(invokeId, output) {\n  return {\n    type: `xstate.done.actor.${invokeId}`,\n    output,\n    actorId: invokeId\n  };\n}\nfunction createErrorActorEvent(id, error) {\n  return {\n    type: `xstate.error.actor.${id}`,\n    error,\n    actorId: id\n  };\n}\nfunction createInitEvent(input) {\n  return {\n    type: XSTATE_INIT,\n    input\n  };\n}\n\n/**\n * This function makes sure that unhandled errors are thrown in a separate\n * macrotask. It allows those errors to be detected by global error handlers and\n * reported to bug tracking services without interrupting our own stack of\n * execution.\n *\n * @param err Error to be thrown\n */\nfunction reportUnhandledError(err) {\n  setTimeout(() => {\n    throw err;\n  });\n}\n\nconst symbolObservable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n\nfunction matchesState(parentStateId, childStateId) {\n  const parentStateValue = toStateValue(parentStateId);\n  const childStateValue = toStateValue(childStateId);\n  if (typeof childStateValue === 'string') {\n    if (typeof parentStateValue === 'string') {\n      return childStateValue === parentStateValue;\n    }\n\n    // Parent more specific than child\n    return false;\n  }\n  if (typeof parentStateValue === 'string') {\n    return parentStateValue in childStateValue;\n  }\n  return Object.keys(parentStateValue).every(key => {\n    if (!(key in childStateValue)) {\n      return false;\n    }\n    return matchesState(parentStateValue[key], childStateValue[key]);\n  });\n}\nfunction toStatePath(stateId) {\n  if (isArray(stateId)) {\n    return stateId;\n  }\n  const result = [];\n  let segment = '';\n  for (let i = 0; i < stateId.length; i++) {\n    const char = stateId.charCodeAt(i);\n    switch (char) {\n      // \\\n      case 92:\n        // consume the next character\n        segment += stateId[i + 1];\n        // and skip over it\n        i++;\n        continue;\n      // .\n      case 46:\n        result.push(segment);\n        segment = '';\n        continue;\n    }\n    segment += stateId[i];\n  }\n  result.push(segment);\n  return result;\n}\nfunction toStateValue(stateValue) {\n  if (isMachineSnapshot(stateValue)) {\n    return stateValue.value;\n  }\n  if (typeof stateValue !== 'string') {\n    return stateValue;\n  }\n  const statePath = toStatePath(stateValue);\n  return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n  if (statePath.length === 1) {\n    return statePath[0];\n  }\n  const value = {};\n  let marker = value;\n  for (let i = 0; i < statePath.length - 1; i++) {\n    if (i === statePath.length - 2) {\n      marker[statePath[i]] = statePath[i + 1];\n    } else {\n      const previous = marker;\n      marker = {};\n      previous[statePath[i]] = marker;\n    }\n  }\n  return value;\n}\nfunction mapValues(collection, iteratee) {\n  const result = {};\n  const collectionKeys = Object.keys(collection);\n  for (let i = 0; i < collectionKeys.length; i++) {\n    const key = collectionKeys[i];\n    result[key] = iteratee(collection[key], key, collection, i);\n  }\n  return result;\n}\nfunction toArrayStrict(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\nfunction toArray(value) {\n  if (value === undefined) {\n    return [];\n  }\n  return toArrayStrict(value);\n}\nfunction resolveOutput(mapper, context, event, self) {\n  if (typeof mapper === 'function') {\n    return mapper({\n      context,\n      event,\n      self\n    });\n  }\n  if (!!mapper && typeof mapper === 'object' && Object.values(mapper).some(val => typeof val === 'function')) {\n    console.warn(`Dynamically mapping values to individual properties is deprecated. Use a single function that returns the mapped object instead.\\nFound object containing properties whose values are possibly mapping functions: ${Object.entries(mapper).filter(([, value]) => typeof value === 'function').map(([key, value]) => `\\n - ${key}: ${value.toString().replace(/\\n\\s*/g, '')}`).join('')}`);\n  }\n  return mapper;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isErrorActorEvent(event) {\n  return event.type.startsWith('xstate.error.actor');\n}\nfunction toTransitionConfigArray(configLike) {\n  return toArrayStrict(configLike).map(transitionLike => {\n    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string') {\n      return {\n        target: transitionLike\n      };\n    }\n    return transitionLike;\n  });\n}\nfunction normalizeTarget(target) {\n  if (target === undefined || target === TARGETLESS_KEY) {\n    return undefined;\n  }\n  return toArray(target);\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n  const isObserver = typeof nextHandler === 'object';\n  const self = isObserver ? nextHandler : undefined;\n  return {\n    next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),\n    error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),\n    complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(self)\n  };\n}\nfunction createInvokeId(stateNodeId, index) {\n  return `${index}.${stateNodeId}`;\n}\nfunction resolveReferencedActor(machine, src) {\n  const match = src.match(/^xstate\\.invoke\\.(\\d+)\\.(.*)/);\n  if (!match) {\n    return machine.implementations.actors[src];\n  }\n  const [, indexStr, nodeId] = match;\n  const node = machine.getStateNodeById(nodeId);\n  const invokeConfig = node.config.invoke;\n  return (Array.isArray(invokeConfig) ? invokeConfig[indexStr] : invokeConfig).src;\n}\nfunction getAllOwnEventDescriptors(snapshot) {\n  return [...new Set([...snapshot._nodes.flatMap(sn => sn.ownEvents)])];\n}\n\nfunction createScheduledEventId(actorRef, id) {\n  return `${actorRef.sessionId}.${id}`;\n}\nlet idCounter = 0;\nfunction createSystem(rootActor, options) {\n  const children = new Map();\n  const keyedActors = new Map();\n  const reverseKeyedActors = new WeakMap();\n  const inspectionObservers = new Set();\n  const timerMap = {};\n  const {\n    clock,\n    logger\n  } = options;\n  const scheduler = {\n    schedule: (source, target, event, delay, id = Math.random().toString(36).slice(2)) => {\n      const scheduledEvent = {\n        source,\n        target,\n        event,\n        delay,\n        id,\n        startedAt: Date.now()\n      };\n      const scheduledEventId = createScheduledEventId(source, id);\n      system._snapshot._scheduledEvents[scheduledEventId] = scheduledEvent;\n      const timeout = clock.setTimeout(() => {\n        delete timerMap[scheduledEventId];\n        delete system._snapshot._scheduledEvents[scheduledEventId];\n        system._relay(source, target, event);\n      }, delay);\n      timerMap[scheduledEventId] = timeout;\n    },\n    cancel: (source, id) => {\n      const scheduledEventId = createScheduledEventId(source, id);\n      const timeout = timerMap[scheduledEventId];\n      delete timerMap[scheduledEventId];\n      delete system._snapshot._scheduledEvents[scheduledEventId];\n      if (timeout !== undefined) {\n        clock.clearTimeout(timeout);\n      }\n    },\n    cancelAll: actorRef => {\n      for (const scheduledEventId in system._snapshot._scheduledEvents) {\n        const scheduledEvent = system._snapshot._scheduledEvents[scheduledEventId];\n        if (scheduledEvent.source === actorRef) {\n          scheduler.cancel(actorRef, scheduledEvent.id);\n        }\n      }\n    }\n  };\n  const sendInspectionEvent = event => {\n    if (!inspectionObservers.size) {\n      return;\n    }\n    const resolvedInspectionEvent = {\n      ...event,\n      rootId: rootActor.sessionId\n    };\n    inspectionObservers.forEach(observer => observer.next?.(resolvedInspectionEvent));\n  };\n  const system = {\n    _snapshot: {\n      _scheduledEvents: (options?.snapshot && options.snapshot.scheduler) ?? {}\n    },\n    _bookId: () => `x:${idCounter++}`,\n    _register: (sessionId, actorRef) => {\n      children.set(sessionId, actorRef);\n      return sessionId;\n    },\n    _unregister: actorRef => {\n      children.delete(actorRef.sessionId);\n      const systemId = reverseKeyedActors.get(actorRef);\n      if (systemId !== undefined) {\n        keyedActors.delete(systemId);\n        reverseKeyedActors.delete(actorRef);\n      }\n    },\n    get: systemId => {\n      return keyedActors.get(systemId);\n    },\n    _set: (systemId, actorRef) => {\n      const existing = keyedActors.get(systemId);\n      if (existing && existing !== actorRef) {\n        throw new Error(`Actor with system ID '${systemId}' already exists.`);\n      }\n      keyedActors.set(systemId, actorRef);\n      reverseKeyedActors.set(actorRef, systemId);\n    },\n    inspect: observerOrFn => {\n      const observer = toObserver(observerOrFn);\n      inspectionObservers.add(observer);\n      return {\n        unsubscribe() {\n          inspectionObservers.delete(observer);\n        }\n      };\n    },\n    _sendInspectionEvent: sendInspectionEvent,\n    _relay: (source, target, event) => {\n      system._sendInspectionEvent({\n        type: '@xstate.event',\n        sourceRef: source,\n        actorRef: target,\n        event\n      });\n      target._send(event);\n    },\n    scheduler,\n    getSnapshot: () => {\n      return {\n        _scheduledEvents: {\n          ...system._snapshot._scheduledEvents\n        }\n      };\n    },\n    start: () => {\n      const scheduledEvents = system._snapshot._scheduledEvents;\n      system._snapshot._scheduledEvents = {};\n      for (const scheduledId in scheduledEvents) {\n        const {\n          source,\n          target,\n          event,\n          delay,\n          id\n        } = scheduledEvents[scheduledId];\n        scheduler.schedule(source, target, event, delay, id);\n      }\n    },\n    _clock: clock,\n    _logger: logger\n  };\n  return system;\n}\n\nlet executingCustomAction = false;\nconst $$ACTOR_TYPE = 1;\n\n// those values are currently used by @xstate/react directly so it's important to keep the assigned values in sync\nlet ProcessingStatus = /*#__PURE__*/function (ProcessingStatus) {\n  ProcessingStatus[ProcessingStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  ProcessingStatus[ProcessingStatus[\"Running\"] = 1] = \"Running\";\n  ProcessingStatus[ProcessingStatus[\"Stopped\"] = 2] = \"Stopped\";\n  return ProcessingStatus;\n}({});\nconst defaultOptions = {\n  clock: {\n    setTimeout: (fn, ms) => {\n      return setTimeout(fn, ms);\n    },\n    clearTimeout: id => {\n      return clearTimeout(id);\n    }\n  },\n  logger: console.log.bind(console),\n  devTools: false\n};\n\n/**\n * An Actor is a running process that can receive events, send events and change\n * its behavior based on the events it receives, which can cause effects outside\n * of the actor. When you run a state machine, it becomes an actor.\n */\nclass Actor {\n  /**\n   * Creates a new actor instance for the given logic with the provided options,\n   * if any.\n   *\n   * @param logic The logic to create an actor from\n   * @param options Actor options\n   */\n  constructor(logic, options) {\n    this.logic = logic;\n    /** The current internal state of the actor. */\n    this._snapshot = void 0;\n    /**\n     * The clock that is responsible for setting and clearing timeouts, such as\n     * delayed events and transitions.\n     */\n    this.clock = void 0;\n    this.options = void 0;\n    /** The unique identifier for this actor relative to its parent. */\n    this.id = void 0;\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this.observers = new Set();\n    this.eventListeners = new Map();\n    this.logger = void 0;\n    /** @internal */\n    this._processingStatus = ProcessingStatus.NotStarted;\n    // Actor Ref\n    this._parent = void 0;\n    /** @internal */\n    this._syncSnapshot = void 0;\n    this.ref = void 0;\n    // TODO: add typings for system\n    this._actorScope = void 0;\n    this._systemId = void 0;\n    /** The globally unique process ID for this invocation. */\n    this.sessionId = void 0;\n    /** The system to which this actor belongs. */\n    this.system = void 0;\n    this._doneEvent = void 0;\n    this.src = void 0;\n    // array of functions to defer\n    this._deferred = [];\n    const resolvedOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    const {\n      clock,\n      logger,\n      parent,\n      syncSnapshot,\n      id,\n      systemId,\n      inspect\n    } = resolvedOptions;\n    this.system = parent ? parent.system : createSystem(this, {\n      clock,\n      logger\n    });\n    if (inspect && !parent) {\n      // Always inspect at the system-level\n      this.system.inspect(toObserver(inspect));\n    }\n    this.sessionId = this.system._bookId();\n    this.id = id ?? this.sessionId;\n    this.logger = options?.logger ?? this.system._logger;\n    this.clock = options?.clock ?? this.system._clock;\n    this._parent = parent;\n    this._syncSnapshot = syncSnapshot;\n    this.options = resolvedOptions;\n    this.src = resolvedOptions.src ?? logic;\n    this.ref = this;\n    this._actorScope = {\n      self: this,\n      id: this.id,\n      sessionId: this.sessionId,\n      logger: this.logger,\n      defer: fn => {\n        this._deferred.push(fn);\n      },\n      system: this.system,\n      stopChild: child => {\n        if (child._parent !== this) {\n          throw new Error(`Cannot stop child actor ${child.id} of ${this.id} because it is not a child`);\n        }\n        child._stop();\n      },\n      emit: emittedEvent => {\n        const listeners = this.eventListeners.get(emittedEvent.type);\n        const wildcardListener = this.eventListeners.get('*');\n        if (!listeners && !wildcardListener) {\n          return;\n        }\n        const allListeners = [...(listeners ? listeners.values() : []), ...(wildcardListener ? wildcardListener.values() : [])];\n        for (const handler of allListeners) {\n          handler(emittedEvent);\n        }\n      },\n      actionExecutor: action => {\n        const exec = () => {\n          this._actorScope.system._sendInspectionEvent({\n            type: '@xstate.action',\n            actorRef: this,\n            action: {\n              type: action.type,\n              params: action.params\n            }\n          });\n          if (!action.exec) {\n            return;\n          }\n          const saveExecutingCustomAction = executingCustomAction;\n          try {\n            executingCustomAction = true;\n            action.exec(action.info, action.params);\n          } finally {\n            executingCustomAction = saveExecutingCustomAction;\n          }\n        };\n        if (this._processingStatus === ProcessingStatus.Running) {\n          exec();\n        } else {\n          this._deferred.push(exec);\n        }\n      }\n    };\n\n    // Ensure that the send method is bound to this Actor instance\n    // if destructured\n    this.send = this.send.bind(this);\n    this.system._sendInspectionEvent({\n      type: '@xstate.actor',\n      actorRef: this\n    });\n    if (systemId) {\n      this._systemId = systemId;\n      this.system._set(systemId, this);\n    }\n    this._initState(options?.snapshot ?? options?.state);\n    if (systemId && this._snapshot.status !== 'active') {\n      this.system._unregister(this);\n    }\n  }\n  _initState(persistedState) {\n    try {\n      this._snapshot = persistedState ? this.logic.restoreSnapshot ? this.logic.restoreSnapshot(persistedState, this._actorScope) : persistedState : this.logic.getInitialSnapshot(this._actorScope, this.options?.input);\n    } catch (err) {\n      // if we get here then it means that we assign a value to this._snapshot that is not of the correct type\n      // we can't get the true `TSnapshot & { status: 'error'; }`, it's impossible\n      // so right now this is a lie of sorts\n      this._snapshot = {\n        status: 'error',\n        output: undefined,\n        error: err\n      };\n    }\n  }\n  update(snapshot, event) {\n    // Update state\n    this._snapshot = snapshot;\n\n    // Execute deferred effects\n    let deferredFn;\n    while (deferredFn = this._deferred.shift()) {\n      try {\n        deferredFn();\n      } catch (err) {\n        // this error can only be caught when executing *initial* actions\n        // it's the only time when we call actions provided by the user through those deferreds\n        // when the actor is already running we always execute them synchronously while transitioning\n        // no \"builtin deferred\" should actually throw an error since they are either safe\n        // or the control flow is passed through the mailbox and errors should be caught by the `_process` used by the mailbox\n        this._deferred.length = 0;\n        this._snapshot = {\n          ...snapshot,\n          status: 'error',\n          error: err\n        };\n      }\n    }\n    switch (this._snapshot.status) {\n      case 'active':\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        break;\n      case 'done':\n        // next observers are meant to be notified about done snapshots\n        // this can be seen as something that is different from how observable work\n        // but with observables `complete` callback is called without any arguments\n        // it's more ergonomic for XState to treat a done snapshot as a \"next\" value\n        // and the completion event as something that is separate,\n        // something that merely follows emitting that done snapshot\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        this._stopProcedure();\n        this._complete();\n        this._doneEvent = createDoneActorEvent(this.id, this._snapshot.output);\n        if (this._parent) {\n          this.system._relay(this, this._parent, this._doneEvent);\n        }\n        break;\n      case 'error':\n        this._error(this._snapshot.error);\n        break;\n    }\n    this.system._sendInspectionEvent({\n      type: '@xstate.snapshot',\n      actorRef: this,\n      event,\n      snapshot\n    });\n  }\n\n  /**\n   * Subscribe an observer to an actor’s snapshot values.\n   *\n   * @remarks\n   * The observer will receive the actor’s snapshot value when it is emitted.\n   * The observer can be:\n   *\n   * - A plain function that receives the latest snapshot, or\n   * - An observer object whose `.next(snapshot)` method receives the latest\n   *   snapshot\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as a plain function\n   * const subscription = actor.subscribe((snapshot) => {\n   *   console.log(snapshot);\n   * });\n   * ```\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as an object\n   * const subscription = actor.subscribe({\n   *   next(snapshot) {\n   *     console.log(snapshot);\n   *   },\n   *   error(err) {\n   *     // ...\n   *   },\n   *   complete() {\n   *     // ...\n   *   }\n   * });\n   * ```\n   *\n   * The return value of `actor.subscribe(observer)` is a subscription object\n   * that has an `.unsubscribe()` method. You can call\n   * `subscription.unsubscribe()` to unsubscribe the observer:\n   *\n   * @example\n   *\n   * ```ts\n   * const subscription = actor.subscribe((snapshot) => {\n   *   // ...\n   * });\n   *\n   * // Unsubscribe the observer\n   * subscription.unsubscribe();\n   * ```\n   *\n   * When the actor is stopped, all of its observers will automatically be\n   * unsubscribed.\n   *\n   * @param observer - Either a plain function that receives the latest\n   *   snapshot, or an observer object whose `.next(snapshot)` method receives\n   *   the latest snapshot\n   */\n\n  subscribe(nextListenerOrObserver, errorListener, completeListener) {\n    const observer = toObserver(nextListenerOrObserver, errorListener, completeListener);\n    if (this._processingStatus !== ProcessingStatus.Stopped) {\n      this.observers.add(observer);\n    } else {\n      switch (this._snapshot.status) {\n        case 'done':\n          try {\n            observer.complete?.();\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n          break;\n        case 'error':\n          {\n            const err = this._snapshot.error;\n            if (!observer.error) {\n              reportUnhandledError(err);\n            } else {\n              try {\n                observer.error(err);\n              } catch (err) {\n                reportUnhandledError(err);\n              }\n            }\n            break;\n          }\n      }\n    }\n    return {\n      unsubscribe: () => {\n        this.observers.delete(observer);\n      }\n    };\n  }\n  on(type, handler) {\n    let listeners = this.eventListeners.get(type);\n    if (!listeners) {\n      listeners = new Set();\n      this.eventListeners.set(type, listeners);\n    }\n    const wrappedHandler = handler.bind(undefined);\n    listeners.add(wrappedHandler);\n    return {\n      unsubscribe: () => {\n        listeners.delete(wrappedHandler);\n      }\n    };\n  }\n\n  /** Starts the Actor from the initial state */\n  start() {\n    if (this._processingStatus === ProcessingStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    }\n    if (this._syncSnapshot) {\n      this.subscribe({\n        next: snapshot => {\n          if (snapshot.status === 'active') {\n            this.system._relay(this, this._parent, {\n              type: `xstate.snapshot.${this.id}`,\n              snapshot\n            });\n          }\n        },\n        error: () => {}\n      });\n    }\n    this.system._register(this.sessionId, this);\n    if (this._systemId) {\n      this.system._set(this._systemId, this);\n    }\n    this._processingStatus = ProcessingStatus.Running;\n\n    // TODO: this isn't correct when rehydrating\n    const initEvent = createInitEvent(this.options.input);\n    this.system._sendInspectionEvent({\n      type: '@xstate.event',\n      sourceRef: this._parent,\n      actorRef: this,\n      event: initEvent\n    });\n    const status = this._snapshot.status;\n    switch (status) {\n      case 'done':\n        // a state machine can be \"done\" upon initialization (it could reach a final state using initial microsteps)\n        // we still need to complete observers, flush deferreds etc\n        this.update(this._snapshot, initEvent);\n        // TODO: rethink cleanup of observers, mailbox, etc\n        return this;\n      case 'error':\n        this._error(this._snapshot.error);\n        return this;\n    }\n    if (!this._parent) {\n      this.system.start();\n    }\n    if (this.logic.start) {\n      try {\n        this.logic.start(this._snapshot, this._actorScope);\n      } catch (err) {\n        this._snapshot = {\n          ...this._snapshot,\n          status: 'error',\n          error: err\n        };\n        this._error(err);\n        return this;\n      }\n    }\n\n    // TODO: this notifies all subscribers but usually this is redundant\n    // there is no real change happening here\n    // we need to rethink if this needs to be refactored\n    this.update(this._snapshot, initEvent);\n    if (this.options.devTools) {\n      this.attachDevTools();\n    }\n    this.mailbox.start();\n    return this;\n  }\n  _process(event) {\n    let nextState;\n    let caughtError;\n    try {\n      nextState = this.logic.transition(this._snapshot, event, this._actorScope);\n    } catch (err) {\n      // we wrap it in a box so we can rethrow it later even if falsy value gets caught here\n      caughtError = {\n        err\n      };\n    }\n    if (caughtError) {\n      const {\n        err\n      } = caughtError;\n      this._snapshot = {\n        ...this._snapshot,\n        status: 'error',\n        error: err\n      };\n      this._error(err);\n      return;\n    }\n    this.update(nextState, event);\n    if (event.type === XSTATE_STOP) {\n      this._stopProcedure();\n      this._complete();\n    }\n  }\n  _stop() {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return this;\n    }\n    this.mailbox.clear();\n    if (this._processingStatus === ProcessingStatus.NotStarted) {\n      this._processingStatus = ProcessingStatus.Stopped;\n      return this;\n    }\n    this.mailbox.enqueue({\n      type: XSTATE_STOP\n    });\n    return this;\n  }\n\n  /** Stops the Actor and unsubscribe all listeners. */\n  stop() {\n    if (this._parent) {\n      throw new Error('A non-root actor cannot be stopped directly.');\n    }\n    return this._stop();\n  }\n  _complete() {\n    for (const observer of this.observers) {\n      try {\n        observer.complete?.();\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    this.observers.clear();\n  }\n  _reportError(err) {\n    if (!this.observers.size) {\n      if (!this._parent) {\n        reportUnhandledError(err);\n      }\n      return;\n    }\n    let reportError = false;\n    for (const observer of this.observers) {\n      const errorListener = observer.error;\n      reportError ||= !errorListener;\n      try {\n        errorListener?.(err);\n      } catch (err2) {\n        reportUnhandledError(err2);\n      }\n    }\n    this.observers.clear();\n    if (reportError) {\n      reportUnhandledError(err);\n    }\n  }\n  _error(err) {\n    this._stopProcedure();\n    this._reportError(err);\n    if (this._parent) {\n      this.system._relay(this, this._parent, createErrorActorEvent(this.id, err));\n    }\n  }\n  // TODO: atm children don't belong entirely to the actor so\n  // in a way - it's not even super aware of them\n  // so we can't stop them from here but we really should!\n  // right now, they are being stopped within the machine's transition\n  // but that could throw and leave us with \"orphaned\" active actors\n  _stopProcedure() {\n    if (this._processingStatus !== ProcessingStatus.Running) {\n      // Actor already stopped; do nothing\n      return this;\n    }\n\n    // Cancel all delayed events\n    this.system.scheduler.cancelAll(this);\n\n    // TODO: mailbox.reset\n    this.mailbox.clear();\n    // TODO: after `stop` we must prepare ourselves for receiving events again\n    // events sent *after* stop signal must be queued\n    // it seems like this should be the common behavior for all of our consumers\n    // so perhaps this should be unified somehow for all of them\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this._processingStatus = ProcessingStatus.Stopped;\n    this.system._unregister(this);\n    return this;\n  }\n\n  /** @internal */\n  _send(event) {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      // do nothing\n      {\n        const eventString = JSON.stringify(event);\n        console.warn(`Event \"${event.type}\" was sent to stopped actor \"${this.id} (${this.sessionId})\". This actor has already reached its final state, and will not transition.\\nEvent: ${eventString}`);\n      }\n      return;\n    }\n    this.mailbox.enqueue(event);\n  }\n\n  /**\n   * Sends an event to the running Actor to trigger a transition.\n   *\n   * @param event The event to send\n   */\n  send(event) {\n    if (typeof event === 'string') {\n      throw new Error(`Only event objects may be sent to actors; use .send({ type: \"${event}\" }) instead`);\n    }\n    this.system._relay(undefined, this, event);\n  }\n  attachDevTools() {\n    const {\n      devTools\n    } = this.options;\n    if (devTools) {\n      const resolvedDevToolsAdapter = typeof devTools === 'function' ? devTools : devToolsAdapter;\n      resolvedDevToolsAdapter(this);\n    }\n  }\n  toJSON() {\n    return {\n      xstate$$type: $$ACTOR_TYPE,\n      id: this.id\n    };\n  }\n\n  /**\n   * Obtain the internal state of the actor, which can be persisted.\n   *\n   * @remarks\n   * The internal state can be persisted from any actor, not only machines.\n   *\n   * Note that the persisted state is not the same as the snapshot from\n   * {@link Actor.getSnapshot}. Persisted state represents the internal state of\n   * the actor, while snapshots represent the actor's last emitted value.\n   *\n   * Can be restored with {@link ActorOptions.state}\n   * @see https://stately.ai/docs/persistence\n   */\n\n  getPersistedSnapshot(options) {\n    return this.logic.getPersistedSnapshot(this._snapshot, options);\n  }\n  [symbolObservable]() {\n    return this;\n  }\n\n  /**\n   * Read an actor’s snapshot synchronously.\n   *\n   * @remarks\n   * The snapshot represent an actor's last emitted value.\n   *\n   * When an actor receives an event, its internal state may change. An actor\n   * may emit a snapshot when a state transition occurs.\n   *\n   * Note that some actors, such as callback actors generated with\n   * `fromCallback`, will not emit snapshots.\n   * @see {@link Actor.subscribe} to subscribe to an actor’s snapshot values.\n   * @see {@link Actor.getPersistedSnapshot} to persist the internal state of an actor (which is more than just a snapshot).\n   */\n  getSnapshot() {\n    if (!this._snapshot) {\n      throw new Error(`Snapshot can't be read while the actor initializes itself`);\n    }\n    return this._snapshot;\n  }\n}\n/**\n * Creates a new actor instance for the given actor logic with the provided\n * options, if any.\n *\n * @remarks\n * When you create an actor from actor logic via `createActor(logic)`, you\n * implicitly create an actor system where the created actor is the root actor.\n * Any actors spawned from this root actor and its descendants are part of that\n * actor system.\n * @example\n *\n * ```ts\n * import { createActor } from 'xstate';\n * import { someActorLogic } from './someActorLogic.ts';\n *\n * // Creating the actor, which implicitly creates an actor system with itself as the root actor\n * const actor = createActor(someActorLogic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * // Actors must be started by calling `actor.start()`, which will also start the actor system.\n * actor.start();\n *\n * // Actors can receive events\n * actor.send({ type: 'someEvent' });\n *\n * // You can stop root actors by calling `actor.stop()`, which will also stop the actor system and all actors in that system.\n * actor.stop();\n * ```\n *\n * @param logic - The actor logic to create an actor from. For a state machine\n *   actor logic creator, see {@link createMachine}. Other actor logic creators\n *   include {@link fromCallback}, {@link fromEventObservable},\n *   {@link fromObservable}, {@link fromPromise}, and {@link fromTransition}.\n * @param options - Actor options\n */\nfunction createActor(logic, ...[options]) {\n  return new Actor(logic, options);\n}\n\n/**\n * Creates a new Interpreter instance for the given machine with the provided\n * options, if any.\n *\n * @deprecated Use `createActor` instead\n * @alias\n */\nconst interpret = createActor;\n\n/**\n * @deprecated Use `Actor` instead.\n * @alias\n */\n\nfunction resolveCancel(_, snapshot, actionArgs, actionParams, {\n  sendId\n}) {\n  const resolvedSendId = typeof sendId === 'function' ? sendId(actionArgs, actionParams) : sendId;\n  return [snapshot, {\n    sendId: resolvedSendId\n  }, undefined];\n}\nfunction executeCancel(actorScope, params) {\n  actorScope.defer(() => {\n    actorScope.system.scheduler.cancel(actorScope.self, params.sendId);\n  });\n}\n/**\n * Cancels a delayed `sendTo(...)` action that is waiting to be executed. The\n * canceled `sendTo(...)` action will not send its event or execute, unless the\n * `delay` has already elapsed before `cancel(...)` is called.\n *\n * @example\n *\n * ```ts\n * import { createMachine, sendTo, cancel } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     sendEvent: {\n *       actions: sendTo(\n *         'some-actor',\n *         { type: 'someEvent' },\n *         {\n *           id: 'some-id',\n *           delay: 1000\n *         }\n *       )\n *     },\n *     cancelEvent: {\n *       actions: cancel('some-id')\n *     }\n *   }\n * });\n * ```\n *\n * @param sendId The `id` of the `sendTo(...)` action to cancel.\n */\nfunction cancel(sendId) {\n  function cancel(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  cancel.type = 'xstate.cancel';\n  cancel.sendId = sendId;\n  cancel.resolve = resolveCancel;\n  cancel.execute = executeCancel;\n  return cancel;\n}\n\nfunction resolveSpawn(actorScope, snapshot, actionArgs, _actionParams, {\n  id,\n  systemId,\n  src,\n  input,\n  syncSnapshot\n}) {\n  const logic = typeof src === 'string' ? resolveReferencedActor(snapshot.machine, src) : src;\n  const resolvedId = typeof id === 'function' ? id(actionArgs) : id;\n  let actorRef;\n  let resolvedInput = undefined;\n  if (logic) {\n    resolvedInput = typeof input === 'function' ? input({\n      context: snapshot.context,\n      event: actionArgs.event,\n      self: actorScope.self\n    }) : input;\n    actorRef = createActor(logic, {\n      id: resolvedId,\n      src,\n      parent: actorScope.self,\n      syncSnapshot,\n      systemId,\n      input: resolvedInput\n    });\n  }\n  if (!actorRef) {\n    console.warn(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-base-to-string\n    `Actor type '${src}' not found in machine '${actorScope.id}'.`);\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children: {\n      ...snapshot.children,\n      [resolvedId]: actorRef\n    }\n  }), {\n    id,\n    systemId,\n    actorRef,\n    src,\n    input: resolvedInput\n  }, undefined];\n}\nfunction executeSpawn(actorScope, {\n  actorRef\n}) {\n  if (!actorRef) {\n    return;\n  }\n  actorScope.defer(() => {\n    if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    actorRef.start();\n  });\n}\nfunction spawnChild(...[src, {\n  id,\n  systemId,\n  input,\n  syncSnapshot = false\n} = {}]) {\n  function spawnChild(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  spawnChild.type = 'xstate.spawnChild';\n  spawnChild.id = id;\n  spawnChild.systemId = systemId;\n  spawnChild.src = src;\n  spawnChild.input = input;\n  spawnChild.syncSnapshot = syncSnapshot;\n  spawnChild.resolve = resolveSpawn;\n  spawnChild.execute = executeSpawn;\n  return spawnChild;\n}\n\nfunction resolveStop(_, snapshot, args, actionParams, {\n  actorRef\n}) {\n  const actorRefOrString = typeof actorRef === 'function' ? actorRef(args, actionParams) : actorRef;\n  const resolvedActorRef = typeof actorRefOrString === 'string' ? snapshot.children[actorRefOrString] : actorRefOrString;\n  let children = snapshot.children;\n  if (resolvedActorRef) {\n    children = {\n      ...children\n    };\n    delete children[resolvedActorRef.id];\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children\n  }), resolvedActorRef, undefined];\n}\nfunction executeStop(actorScope, actorRef) {\n  if (!actorRef) {\n    return;\n  }\n\n  // we need to eagerly unregister it here so a new actor with the same systemId can be registered immediately\n  // since we defer actual stopping of the actor but we don't defer actor creations (and we can't do that)\n  // this could throw on `systemId` collision, for example, when dealing with reentering transitions\n  actorScope.system._unregister(actorRef);\n\n  // this allows us to prevent an actor from being started if it gets stopped within the same macrostep\n  // this can happen, for example, when the invoking state is being exited immediately by an always transition\n  if (actorRef._processingStatus !== ProcessingStatus.Running) {\n    actorScope.stopChild(actorRef);\n    return;\n  }\n  // stopping a child enqueues a stop event in the child actor's mailbox\n  // we need for all of the already enqueued events to be processed before we stop the child\n  // the parent itself might want to send some events to a child (for example from exit actions on the invoking state)\n  // and we don't want to ignore those events\n  actorScope.defer(() => {\n    actorScope.stopChild(actorRef);\n  });\n}\n/**\n * Stops a child actor.\n *\n * @param actorRef The actor to stop.\n */\nfunction stopChild(actorRef) {\n  function stop(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  stop.type = 'xstate.stopChild';\n  stop.actorRef = actorRef;\n  stop.resolve = resolveStop;\n  stop.execute = executeStop;\n  return stop;\n}\n\n/**\n * Stops a child actor.\n *\n * @deprecated Use `stopChild(...)` instead\n * @alias\n */\nconst stop = stopChild;\n\nfunction checkStateIn(snapshot, _, {\n  stateValue\n}) {\n  if (typeof stateValue === 'string' && isStateId(stateValue)) {\n    const target = snapshot.machine.getStateNodeById(stateValue);\n    return snapshot._nodes.some(sn => sn === target);\n  }\n  return snapshot.matches(stateValue);\n}\nfunction stateIn(stateValue) {\n  function stateIn() {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  stateIn.check = checkStateIn;\n  stateIn.stateValue = stateValue;\n  return stateIn;\n}\nfunction checkNot(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return !evaluateGuard(guards[0], context, event, snapshot);\n}\n\n/**\n * Higher-order guard that evaluates to `true` if the `guard` passed to it\n * evaluates to `false`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, not } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => false\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: not('someNamedGuard'),\n *       actions: () => {\n *         // will be executed if guard in `not(...)`\n *         // evaluates to `false`\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard\n */\nfunction not(guard) {\n  function not(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  not.check = checkNot;\n  not.guards = [guard];\n  return not;\n}\nfunction checkAnd(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.every(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if all `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, and } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: and([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if all guards in `and(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction and(guards) {\n  function and(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  and.check = checkAnd;\n  and.guards = guards;\n  return and;\n}\nfunction checkOr(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.some(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if any of the `guards` passed to\n * it evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, or } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: or([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if any of the guards in `or(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction or(guards) {\n  function or(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  or.check = checkOr;\n  or.guards = guards;\n  return or;\n}\n\n// TODO: throw on cycles (depth check should be enough)\nfunction evaluateGuard(guard, context, event, snapshot) {\n  const {\n    machine\n  } = snapshot;\n  const isInline = typeof guard === 'function';\n  const resolved = isInline ? guard : machine.implementations.guards[typeof guard === 'string' ? guard : guard.type];\n  if (!isInline && !resolved) {\n    throw new Error(`Guard '${typeof guard === 'string' ? guard : guard.type}' is not implemented.'.`);\n  }\n  if (typeof resolved !== 'function') {\n    return evaluateGuard(resolved, context, event, snapshot);\n  }\n  const guardArgs = {\n    context,\n    event\n  };\n  const guardParams = isInline || typeof guard === 'string' ? undefined : 'params' in guard ? typeof guard.params === 'function' ? guard.params({\n    context,\n    event\n  }) : guard.params : undefined;\n  if (!('check' in resolved)) {\n    // the existing type of `.guards` assumes non-nullable `TExpressionGuard`\n    // inline guards expect `TExpressionGuard` to be set to `undefined`\n    // it's fine to cast this here, our logic makes sure that we call those 2 \"variants\" correctly\n    return resolved(guardArgs, guardParams);\n  }\n  const builtinGuard = resolved;\n  return builtinGuard.check(snapshot, guardArgs, resolved // this holds all params\n  );\n}\n\nconst isAtomicStateNode = stateNode => stateNode.type === 'atomic' || stateNode.type === 'final';\nfunction getChildren(stateNode) {\n  return Object.values(stateNode.states).filter(sn => sn.type !== 'history');\n}\nfunction getProperAncestors(stateNode, toStateNode) {\n  const ancestors = [];\n  if (toStateNode === stateNode) {\n    return ancestors;\n  }\n\n  // add all ancestors\n  let m = stateNode.parent;\n  while (m && m !== toStateNode) {\n    ancestors.push(m);\n    m = m.parent;\n  }\n  return ancestors;\n}\nfunction getAllStateNodes(stateNodes) {\n  const nodeSet = new Set(stateNodes);\n  const adjList = getAdjList(nodeSet);\n\n  // add descendants\n  for (const s of nodeSet) {\n    // if previously active, add existing child nodes\n    if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {\n      getInitialStateNodesWithTheirAncestors(s).forEach(sn => nodeSet.add(sn));\n    } else {\n      if (s.type === 'parallel') {\n        for (const child of getChildren(s)) {\n          if (child.type === 'history') {\n            continue;\n          }\n          if (!nodeSet.has(child)) {\n            const initialStates = getInitialStateNodesWithTheirAncestors(child);\n            for (const initialStateNode of initialStates) {\n              nodeSet.add(initialStateNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // add all ancestors\n  for (const s of nodeSet) {\n    let m = s.parent;\n    while (m) {\n      nodeSet.add(m);\n      m = m.parent;\n    }\n  }\n  return nodeSet;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n  const childStateNodes = adjList.get(baseNode);\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n  if (baseNode.type === 'compound') {\n    const childStateNode = childStateNodes[0];\n    if (childStateNode) {\n      if (isAtomicStateNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n  const stateValue = {};\n  for (const childStateNode of childStateNodes) {\n    stateValue[childStateNode.key] = getValueFromAdj(childStateNode, adjList);\n  }\n  return stateValue;\n}\nfunction getAdjList(stateNodes) {\n  const adjList = new Map();\n  for (const s of stateNodes) {\n    if (!adjList.has(s)) {\n      adjList.set(s, []);\n    }\n    if (s.parent) {\n      if (!adjList.has(s.parent)) {\n        adjList.set(s.parent, []);\n      }\n      adjList.get(s.parent).push(s);\n    }\n  }\n  return adjList;\n}\nfunction getStateValue(rootNode, stateNodes) {\n  const config = getAllStateNodes(stateNodes);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction isInFinalState(stateNodeSet, stateNode) {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(s => s.type === 'final' && stateNodeSet.has(s));\n  }\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every(sn => isInFinalState(stateNodeSet, sn));\n  }\n  return stateNode.type === 'final';\n}\nconst isStateId = str => str[0] === STATE_IDENTIFIER;\nfunction getCandidates(stateNode, receivedEventType) {\n  const candidates = stateNode.transitions.get(receivedEventType) || [...stateNode.transitions.keys()].filter(eventDescriptor => {\n    // check if transition is a wildcard transition,\n    // which matches any non-transient events\n    if (eventDescriptor === WILDCARD) {\n      return true;\n    }\n    if (!eventDescriptor.endsWith('.*')) {\n      return false;\n    }\n    if (/.*\\*.+/.test(eventDescriptor)) {\n      console.warn(`Wildcards can only be the last token of an event descriptor (e.g., \"event.*\") or the entire event descriptor (\"*\"). Check the \"${eventDescriptor}\" event.`);\n    }\n    const partialEventTokens = eventDescriptor.split('.');\n    const eventTokens = receivedEventType.split('.');\n    for (let tokenIndex = 0; tokenIndex < partialEventTokens.length; tokenIndex++) {\n      const partialEventToken = partialEventTokens[tokenIndex];\n      const eventToken = eventTokens[tokenIndex];\n      if (partialEventToken === '*') {\n        const isLastToken = tokenIndex === partialEventTokens.length - 1;\n        if (!isLastToken) {\n          console.warn(`Infix wildcards in transition events are not allowed. Check the \"${eventDescriptor}\" transition.`);\n        }\n        return isLastToken;\n      }\n      if (partialEventToken !== eventToken) {\n        return false;\n      }\n    }\n    return true;\n  }).sort((a, b) => b.length - a.length).flatMap(key => stateNode.transitions.get(key));\n  return candidates;\n}\n\n/** All delayed transitions from the config. */\nfunction getDelayedTransitions(stateNode) {\n  const afterConfig = stateNode.config.after;\n  if (!afterConfig) {\n    return [];\n  }\n  const mutateEntryExit = delay => {\n    const afterEvent = createAfterEvent(delay, stateNode.id);\n    const eventType = afterEvent.type;\n    stateNode.entry.push(raise(afterEvent, {\n      id: eventType,\n      delay\n    }));\n    stateNode.exit.push(cancel(eventType));\n    return eventType;\n  };\n  const delayedTransitions = Object.keys(afterConfig).flatMap(delay => {\n    const configTransition = afterConfig[delay];\n    const resolvedTransition = typeof configTransition === 'string' ? {\n      target: configTransition\n    } : configTransition;\n    const resolvedDelay = Number.isNaN(+delay) ? delay : +delay;\n    const eventType = mutateEntryExit(resolvedDelay);\n    return toArray(resolvedTransition).map(transition => ({\n      ...transition,\n      event: eventType,\n      delay: resolvedDelay\n    }));\n  });\n  return delayedTransitions.map(delayedTransition => {\n    const {\n      delay\n    } = delayedTransition;\n    return {\n      ...formatTransition(stateNode, delayedTransition.event, delayedTransition),\n      delay\n    };\n  });\n}\nfunction formatTransition(stateNode, descriptor, transitionConfig) {\n  const normalizedTarget = normalizeTarget(transitionConfig.target);\n  const reenter = transitionConfig.reenter ?? false;\n  const target = resolveTarget(stateNode, normalizedTarget);\n\n  // TODO: should this be part of a lint rule instead?\n  if (transitionConfig.cond) {\n    throw new Error(`State \"${stateNode.id}\" has declared \\`cond\\` for one of its transitions. This property has been renamed to \\`guard\\`. Please update your code.`);\n  }\n  const transition = {\n    ...transitionConfig,\n    actions: toArray(transitionConfig.actions),\n    guard: transitionConfig.guard,\n    target,\n    source: stateNode,\n    reenter,\n    eventType: descriptor,\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: target ? target.map(t => `#${t.id}`) : undefined\n    })\n  };\n  return transition;\n}\nfunction formatTransitions(stateNode) {\n  const transitions = new Map();\n  if (stateNode.config.on) {\n    for (const descriptor of Object.keys(stateNode.config.on)) {\n      if (descriptor === NULL_EVENT) {\n        throw new Error('Null events (\"\") cannot be specified as a transition key. Use `always: { ... }` instead.');\n      }\n      const transitionsConfig = stateNode.config.on[descriptor];\n      transitions.set(descriptor, toTransitionConfigArray(transitionsConfig).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  if (stateNode.config.onDone) {\n    const descriptor = `xstate.done.state.${stateNode.id}`;\n    transitions.set(descriptor, toTransitionConfigArray(stateNode.config.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n  }\n  for (const invokeDef of stateNode.invoke) {\n    if (invokeDef.onDone) {\n      const descriptor = `xstate.done.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onError) {\n      const descriptor = `xstate.error.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onError).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onSnapshot) {\n      const descriptor = `xstate.snapshot.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onSnapshot).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  for (const delayedTransition of stateNode.after) {\n    let existing = transitions.get(delayedTransition.eventType);\n    if (!existing) {\n      existing = [];\n      transitions.set(delayedTransition.eventType, existing);\n    }\n    existing.push(delayedTransition);\n  }\n  return transitions;\n}\nfunction formatInitialTransition(stateNode, _target) {\n  const resolvedTarget = typeof _target === 'string' ? stateNode.states[_target] : _target ? stateNode.states[_target.target] : undefined;\n  if (!resolvedTarget && _target) {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-base-to-string\n    `Initial state node \"${_target}\" not found on parent state node #${stateNode.id}`);\n  }\n  const transition = {\n    source: stateNode,\n    actions: !_target || typeof _target === 'string' ? [] : toArray(_target.actions),\n    eventType: null,\n    reenter: false,\n    target: resolvedTarget ? [resolvedTarget] : [],\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: resolvedTarget ? [`#${resolvedTarget.id}`] : []\n    })\n  };\n  return transition;\n}\nfunction resolveTarget(stateNode, targets) {\n  if (targets === undefined) {\n    // an undefined target signals that the state node should not transition from that state when receiving that event\n    return undefined;\n  }\n  return targets.map(target => {\n    if (typeof target !== 'string') {\n      return target;\n    }\n    if (isStateId(target)) {\n      return stateNode.machine.getStateNodeById(target);\n    }\n    const isInternalTarget = target[0] === STATE_DELIMITER;\n    // If internal target is defined on machine,\n    // do not include machine key on target\n    if (isInternalTarget && !stateNode.parent) {\n      return getStateNodeByPath(stateNode, target.slice(1));\n    }\n    const resolvedTarget = isInternalTarget ? stateNode.key + target : target;\n    if (stateNode.parent) {\n      try {\n        const targetStateNode = getStateNodeByPath(stateNode.parent, resolvedTarget);\n        return targetStateNode;\n      } catch (err) {\n        throw new Error(`Invalid transition definition for state node '${stateNode.id}':\\n${err.message}`);\n      }\n    } else {\n      throw new Error(`Invalid target: \"${target}\" is not a valid target from the root node. Did you mean \".${target}\"?`);\n    }\n  });\n}\nfunction resolveHistoryDefaultTransition(stateNode) {\n  const normalizedTarget = normalizeTarget(stateNode.config.target);\n  if (!normalizedTarget) {\n    return stateNode.parent.initial;\n  }\n  return {\n    target: normalizedTarget.map(t => typeof t === 'string' ? getStateNodeByPath(stateNode.parent, t) : t)\n  };\n}\nfunction isHistoryNode(stateNode) {\n  return stateNode.type === 'history';\n}\nfunction getInitialStateNodesWithTheirAncestors(stateNode) {\n  const states = getInitialStateNodes(stateNode);\n  for (const initialState of states) {\n    for (const ancestor of getProperAncestors(initialState, stateNode)) {\n      states.add(ancestor);\n    }\n  }\n  return states;\n}\nfunction getInitialStateNodes(stateNode) {\n  const set = new Set();\n  function iter(descStateNode) {\n    if (set.has(descStateNode)) {\n      return;\n    }\n    set.add(descStateNode);\n    if (descStateNode.type === 'compound') {\n      iter(descStateNode.initial.target[0]);\n    } else if (descStateNode.type === 'parallel') {\n      for (const child of getChildren(descStateNode)) {\n        iter(child);\n      }\n    }\n  }\n  iter(stateNode);\n  return set;\n}\n/** Returns the child state node from its relative `stateKey`, or throws. */\nfunction getStateNode(stateNode, stateKey) {\n  if (isStateId(stateKey)) {\n    return stateNode.machine.getStateNodeById(stateKey);\n  }\n  if (!stateNode.states) {\n    throw new Error(`Unable to retrieve child state '${stateKey}' from '${stateNode.id}'; no child states exist.`);\n  }\n  const result = stateNode.states[stateKey];\n  if (!result) {\n    throw new Error(`Child state '${stateKey}' does not exist on '${stateNode.id}'`);\n  }\n  return result;\n}\n\n/**\n * Returns the relative state node from the given `statePath`, or throws.\n *\n * @param statePath The string or string array relative path to the state node.\n */\nfunction getStateNodeByPath(stateNode, statePath) {\n  if (typeof statePath === 'string' && isStateId(statePath)) {\n    try {\n      return stateNode.machine.getStateNodeById(statePath);\n    } catch {\n      // try individual paths\n      // throw e;\n    }\n  }\n  const arrayStatePath = toStatePath(statePath).slice();\n  let currentStateNode = stateNode;\n  while (arrayStatePath.length) {\n    const key = arrayStatePath.shift();\n    if (!key.length) {\n      break;\n    }\n    currentStateNode = getStateNode(currentStateNode, key);\n  }\n  return currentStateNode;\n}\n\n/**\n * Returns the state nodes represented by the current state value.\n *\n * @param stateValue The state value or State instance\n */\nfunction getStateNodes(stateNode, stateValue) {\n  if (typeof stateValue === 'string') {\n    const childStateNode = stateNode.states[stateValue];\n    if (!childStateNode) {\n      throw new Error(`State '${stateValue}' does not exist on '${stateNode.id}'`);\n    }\n    return [stateNode, childStateNode];\n  }\n  const childStateKeys = Object.keys(stateValue);\n  const childStateNodes = childStateKeys.map(subStateKey => getStateNode(stateNode, subStateKey)).filter(Boolean);\n  return [stateNode.machine.root, stateNode].concat(childStateNodes, childStateKeys.reduce((allSubStateNodes, subStateKey) => {\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    if (!subStateNode) {\n      return allSubStateNodes;\n    }\n    const subStateNodes = getStateNodes(subStateNode, stateValue[subStateKey]);\n    return allSubStateNodes.concat(subStateNodes);\n  }, []));\n}\nfunction transitionAtomicNode(stateNode, stateValue, snapshot, event) {\n  const childStateNode = getStateNode(stateNode, stateValue);\n  const next = childStateNode.next(snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionCompoundNode(stateNode, stateValue, snapshot, event) {\n  const subStateKeys = Object.keys(stateValue);\n  const childStateNode = getStateNode(stateNode, subStateKeys[0]);\n  const next = transitionNode(childStateNode, stateValue[subStateKeys[0]], snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionParallelNode(stateNode, stateValue, snapshot, event) {\n  const allInnerTransitions = [];\n  for (const subStateKey of Object.keys(stateValue)) {\n    const subStateValue = stateValue[subStateKey];\n    if (!subStateValue) {\n      continue;\n    }\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    const innerTransitions = transitionNode(subStateNode, subStateValue, snapshot, event);\n    if (innerTransitions) {\n      allInnerTransitions.push(...innerTransitions);\n    }\n  }\n  if (!allInnerTransitions.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return allInnerTransitions;\n}\nfunction transitionNode(stateNode, stateValue, snapshot, event) {\n  // leaf node\n  if (typeof stateValue === 'string') {\n    return transitionAtomicNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // compound node\n  if (Object.keys(stateValue).length === 1) {\n    return transitionCompoundNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // parallel node\n  return transitionParallelNode(stateNode, stateValue, snapshot, event);\n}\nfunction getHistoryNodes(stateNode) {\n  return Object.keys(stateNode.states).map(key => stateNode.states[key]).filter(sn => sn.type === 'history');\n}\nfunction isDescendant(childStateNode, parentStateNode) {\n  let marker = childStateNode;\n  while (marker.parent && marker.parent !== parentStateNode) {\n    marker = marker.parent;\n  }\n  return marker.parent === parentStateNode;\n}\nfunction hasIntersection(s1, s2) {\n  const set1 = new Set(s1);\n  const set2 = new Set(s2);\n  for (const item of set1) {\n    if (set2.has(item)) {\n      return true;\n    }\n  }\n  for (const item of set2) {\n    if (set1.has(item)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeConflictingTransitions(enabledTransitions, stateNodeSet, historyValue) {\n  const filteredTransitions = new Set();\n  for (const t1 of enabledTransitions) {\n    let t1Preempted = false;\n    const transitionsToRemove = new Set();\n    for (const t2 of filteredTransitions) {\n      if (hasIntersection(computeExitSet([t1], stateNodeSet, historyValue), computeExitSet([t2], stateNodeSet, historyValue))) {\n        if (isDescendant(t1.source, t2.source)) {\n          transitionsToRemove.add(t2);\n        } else {\n          t1Preempted = true;\n          break;\n        }\n      }\n    }\n    if (!t1Preempted) {\n      for (const t3 of transitionsToRemove) {\n        filteredTransitions.delete(t3);\n      }\n      filteredTransitions.add(t1);\n    }\n  }\n  return Array.from(filteredTransitions);\n}\nfunction findLeastCommonAncestor(stateNodes) {\n  const [head, ...tail] = stateNodes;\n  for (const ancestor of getProperAncestors(head, undefined)) {\n    if (tail.every(sn => isDescendant(sn, ancestor))) {\n      return ancestor;\n    }\n  }\n}\nfunction getEffectiveTargetStates(transition, historyValue) {\n  if (!transition.target) {\n    return [];\n  }\n  const targets = new Set();\n  for (const targetNode of transition.target) {\n    if (isHistoryNode(targetNode)) {\n      if (historyValue[targetNode.id]) {\n        for (const node of historyValue[targetNode.id]) {\n          targets.add(node);\n        }\n      } else {\n        for (const node of getEffectiveTargetStates(resolveHistoryDefaultTransition(targetNode), historyValue)) {\n          targets.add(node);\n        }\n      }\n    } else {\n      targets.add(targetNode);\n    }\n  }\n  return [...targets];\n}\nfunction getTransitionDomain(transition, historyValue) {\n  const targetStates = getEffectiveTargetStates(transition, historyValue);\n  if (!targetStates) {\n    return;\n  }\n  if (!transition.reenter && targetStates.every(target => target === transition.source || isDescendant(target, transition.source))) {\n    return transition.source;\n  }\n  const lca = findLeastCommonAncestor(targetStates.concat(transition.source));\n  if (lca) {\n    return lca;\n  }\n\n  // at this point we know that it's a root transition since LCA couldn't be found\n  if (transition.reenter) {\n    return;\n  }\n  return transition.source.machine.root;\n}\nfunction computeExitSet(transitions, stateNodeSet, historyValue) {\n  const statesToExit = new Set();\n  for (const t of transitions) {\n    if (t.target?.length) {\n      const domain = getTransitionDomain(t, historyValue);\n      if (t.reenter && t.source === domain) {\n        statesToExit.add(domain);\n      }\n      for (const stateNode of stateNodeSet) {\n        if (isDescendant(stateNode, domain)) {\n          statesToExit.add(stateNode);\n        }\n      }\n    }\n  }\n  return [...statesToExit];\n}\nfunction areStateNodeCollectionsEqual(prevStateNodes, nextStateNodeSet) {\n  if (prevStateNodes.length !== nextStateNodeSet.size) {\n    return false;\n  }\n  for (const node of prevStateNodes) {\n    if (!nextStateNodeSet.has(node)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** https://www.w3.org/TR/scxml/#microstepProcedure */\nfunction microstep(transitions, currentSnapshot, actorScope, event, isInitial, internalQueue) {\n  if (!transitions.length) {\n    return currentSnapshot;\n  }\n  const mutStateNodeSet = new Set(currentSnapshot._nodes);\n  let historyValue = currentSnapshot.historyValue;\n  const filteredTransitions = removeConflictingTransitions(transitions, mutStateNodeSet, historyValue);\n  let nextState = currentSnapshot;\n\n  // Exit states\n  if (!isInitial) {\n    [nextState, historyValue] = exitStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, historyValue, internalQueue, actorScope.actionExecutor);\n  }\n\n  // Execute transition content\n  nextState = resolveActionsAndContext(nextState, event, actorScope, filteredTransitions.flatMap(t => t.actions), internalQueue, undefined);\n\n  // Enter states\n  nextState = enterStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial);\n  const nextStateNodes = [...mutStateNodeSet];\n  if (nextState.status === 'done') {\n    nextState = resolveActionsAndContext(nextState, event, actorScope, nextStateNodes.sort((a, b) => b.order - a.order).flatMap(state => state.exit), internalQueue, undefined);\n  }\n\n  // eslint-disable-next-line no-useless-catch\n  try {\n    if (historyValue === currentSnapshot.historyValue && areStateNodeCollectionsEqual(currentSnapshot._nodes, mutStateNodeSet)) {\n      return nextState;\n    }\n    return cloneMachineSnapshot(nextState, {\n      _nodes: nextStateNodes,\n      historyValue\n    });\n  } catch (e) {\n    // TODO: Refactor this once proper error handling is implemented.\n    // See https://github.com/statelyai/rfcs/pull/4\n    throw e;\n  }\n}\nfunction getMachineOutput(snapshot, event, actorScope, rootNode, rootCompletionNode) {\n  if (rootNode.output === undefined) {\n    return;\n  }\n  const doneStateEvent = createDoneStateEvent(rootCompletionNode.id, rootCompletionNode.output !== undefined && rootCompletionNode.parent ? resolveOutput(rootCompletionNode.output, snapshot.context, event, actorScope.self) : undefined);\n  return resolveOutput(rootNode.output, snapshot.context, doneStateEvent, actorScope.self);\n}\nfunction enterStates(currentSnapshot, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial) {\n  let nextSnapshot = currentSnapshot;\n  const statesToEnter = new Set();\n  // those are states that were directly targeted or indirectly targeted by the explicit target\n  // in other words, those are states for which initial actions should be executed\n  // when we target `#deep_child` initial actions of its ancestors shouldn't be executed\n  const statesForDefaultEntry = new Set();\n  computeEntrySet(filteredTransitions, historyValue, statesForDefaultEntry, statesToEnter);\n\n  // In the initial state, the root state node is \"entered\".\n  if (isInitial) {\n    statesForDefaultEntry.add(currentSnapshot.machine.root);\n  }\n  const completedNodes = new Set();\n  for (const stateNodeToEnter of [...statesToEnter].sort((a, b) => a.order - b.order)) {\n    mutStateNodeSet.add(stateNodeToEnter);\n    const actions = [];\n\n    // Add entry actions\n    actions.push(...stateNodeToEnter.entry);\n    for (const invokeDef of stateNodeToEnter.invoke) {\n      actions.push(spawnChild(invokeDef.src, {\n        ...invokeDef,\n        syncSnapshot: !!invokeDef.onSnapshot\n      }));\n    }\n    if (statesForDefaultEntry.has(stateNodeToEnter)) {\n      const initialActions = stateNodeToEnter.initial.actions;\n      actions.push(...initialActions);\n    }\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, actions, internalQueue, stateNodeToEnter.invoke.map(invokeDef => invokeDef.id));\n    if (stateNodeToEnter.type === 'final') {\n      const parent = stateNodeToEnter.parent;\n      let ancestorMarker = parent?.type === 'parallel' ? parent : parent?.parent;\n      let rootCompletionNode = ancestorMarker || stateNodeToEnter;\n      if (parent?.type === 'compound') {\n        internalQueue.push(createDoneStateEvent(parent.id, stateNodeToEnter.output !== undefined ? resolveOutput(stateNodeToEnter.output, nextSnapshot.context, event, actorScope.self) : undefined));\n      }\n      while (ancestorMarker?.type === 'parallel' && !completedNodes.has(ancestorMarker) && isInFinalState(mutStateNodeSet, ancestorMarker)) {\n        completedNodes.add(ancestorMarker);\n        internalQueue.push(createDoneStateEvent(ancestorMarker.id));\n        rootCompletionNode = ancestorMarker;\n        ancestorMarker = ancestorMarker.parent;\n      }\n      if (ancestorMarker) {\n        continue;\n      }\n      nextSnapshot = cloneMachineSnapshot(nextSnapshot, {\n        status: 'done',\n        output: getMachineOutput(nextSnapshot, event, actorScope, nextSnapshot.machine.root, rootCompletionNode)\n      });\n    }\n  }\n  return nextSnapshot;\n}\nfunction computeEntrySet(transitions, historyValue, statesForDefaultEntry, statesToEnter) {\n  for (const t of transitions) {\n    const domain = getTransitionDomain(t, historyValue);\n    for (const s of t.target || []) {\n      if (!isHistoryNode(s) && (\n      // if the target is different than the source then it will *definitely* be entered\n      t.source !== s ||\n      // we know that the domain can't lie within the source\n      // if it's different than the source then it's outside of it and it means that the target has to be entered as well\n      t.source !== domain ||\n      // reentering transitions always enter the target, even if it's the source itself\n      t.reenter)) {\n        statesToEnter.add(s);\n        statesForDefaultEntry.add(s);\n      }\n      addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n    }\n    const targetStates = getEffectiveTargetStates(t, historyValue);\n    for (const s of targetStates) {\n      const ancestors = getProperAncestors(s, domain);\n      if (domain?.type === 'parallel') {\n        ancestors.push(domain);\n      }\n      addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, !t.source.parent && t.reenter ? undefined : domain);\n    }\n  }\n}\nfunction addDescendantStatesToEnter(stateNode, historyValue, statesForDefaultEntry, statesToEnter) {\n  if (isHistoryNode(stateNode)) {\n    if (historyValue[stateNode.id]) {\n      const historyStateNodes = historyValue[stateNode.id];\n      for (const s of historyStateNodes) {\n        statesToEnter.add(s);\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyStateNodes) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    } else {\n      const historyDefaultTransition = resolveHistoryDefaultTransition(stateNode);\n      for (const s of historyDefaultTransition.target) {\n        statesToEnter.add(s);\n        if (historyDefaultTransition === stateNode.parent?.initial) {\n          statesForDefaultEntry.add(stateNode.parent);\n        }\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyDefaultTransition.target) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    }\n  } else {\n    if (stateNode.type === 'compound') {\n      const [initialState] = stateNode.initial.target;\n      if (!isHistoryNode(initialState)) {\n        statesToEnter.add(initialState);\n        statesForDefaultEntry.add(initialState);\n      }\n      addDescendantStatesToEnter(initialState, historyValue, statesForDefaultEntry, statesToEnter);\n      addProperAncestorStatesToEnter(initialState, stateNode, statesToEnter, historyValue, statesForDefaultEntry);\n    } else {\n      if (stateNode.type === 'parallel') {\n        for (const child of getChildren(stateNode).filter(sn => !isHistoryNode(sn))) {\n          if (![...statesToEnter].some(s => isDescendant(s, child))) {\n            if (!isHistoryNode(child)) {\n              statesToEnter.add(child);\n              statesForDefaultEntry.add(child);\n            }\n            addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n          }\n        }\n      }\n    }\n  }\n}\nfunction addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, reentrancyDomain) {\n  for (const anc of ancestors) {\n    if (!reentrancyDomain || isDescendant(anc, reentrancyDomain)) {\n      statesToEnter.add(anc);\n    }\n    if (anc.type === 'parallel') {\n      for (const child of getChildren(anc).filter(sn => !isHistoryNode(sn))) {\n        if (![...statesToEnter].some(s => isDescendant(s, child))) {\n          statesToEnter.add(child);\n          addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n        }\n      }\n    }\n  }\n}\nfunction addProperAncestorStatesToEnter(stateNode, toStateNode, statesToEnter, historyValue, statesForDefaultEntry) {\n  addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, getProperAncestors(stateNode, toStateNode));\n}\nfunction exitStates(currentSnapshot, event, actorScope, transitions, mutStateNodeSet, historyValue, internalQueue, _actionExecutor) {\n  let nextSnapshot = currentSnapshot;\n  const statesToExit = computeExitSet(transitions, mutStateNodeSet, historyValue);\n  statesToExit.sort((a, b) => b.order - a.order);\n  let changedHistory;\n\n  // From SCXML algorithm: https://www.w3.org/TR/scxml/#exitStates\n  for (const exitStateNode of statesToExit) {\n    for (const historyNode of getHistoryNodes(exitStateNode)) {\n      let predicate;\n      if (historyNode.history === 'deep') {\n        predicate = sn => isAtomicStateNode(sn) && isDescendant(sn, exitStateNode);\n      } else {\n        predicate = sn => {\n          return sn.parent === exitStateNode;\n        };\n      }\n      changedHistory ??= {\n        ...historyValue\n      };\n      changedHistory[historyNode.id] = Array.from(mutStateNodeSet).filter(predicate);\n    }\n  }\n  for (const s of statesToExit) {\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, [...s.exit, ...s.invoke.map(def => stopChild(def.id))], internalQueue, undefined);\n    mutStateNodeSet.delete(s);\n  }\n  return [nextSnapshot, changedHistory || historyValue];\n}\nfunction getAction(machine, actionType) {\n  return machine.implementations.actions[actionType];\n}\nfunction resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, extra, retries) {\n  const {\n    machine\n  } = currentSnapshot;\n  let intermediateSnapshot = currentSnapshot;\n  for (const action of actions) {\n    const isInline = typeof action === 'function';\n    const resolvedAction = isInline ? action :\n    // the existing type of `.actions` assumes non-nullable `TExpressionAction`\n    // it's fine to cast this here to get a common type and lack of errors in the rest of the code\n    // our logic below makes sure that we call those 2 \"variants\" correctly\n\n    getAction(machine, typeof action === 'string' ? action : action.type);\n    const actionArgs = {\n      context: intermediateSnapshot.context,\n      event,\n      self: actorScope.self,\n      system: actorScope.system\n    };\n    const actionParams = isInline || typeof action === 'string' ? undefined : 'params' in action ? typeof action.params === 'function' ? action.params({\n      context: intermediateSnapshot.context,\n      event\n    }) : action.params : undefined;\n    if (!resolvedAction || !('resolve' in resolvedAction)) {\n      actorScope.actionExecutor({\n        type: typeof action === 'string' ? action : typeof action === 'object' ? action.type : action.name || '(anonymous)',\n        info: actionArgs,\n        params: actionParams,\n        exec: resolvedAction\n      });\n      continue;\n    }\n    const builtinAction = resolvedAction;\n    const [nextState, params, actions] = builtinAction.resolve(actorScope, intermediateSnapshot, actionArgs, actionParams, resolvedAction,\n    // this holds all params\n    extra);\n    intermediateSnapshot = nextState;\n    if ('retryResolve' in builtinAction) {\n      retries?.push([builtinAction, params]);\n    }\n    if ('execute' in builtinAction) {\n      actorScope.actionExecutor({\n        type: builtinAction.type,\n        info: actionArgs,\n        params,\n        exec: builtinAction.execute.bind(null, actorScope, params)\n      });\n    }\n    if (actions) {\n      intermediateSnapshot = resolveAndExecuteActionsWithContext(intermediateSnapshot, event, actorScope, actions, extra, retries);\n    }\n  }\n  return intermediateSnapshot;\n}\nfunction resolveActionsAndContext(currentSnapshot, event, actorScope, actions, internalQueue, deferredActorIds) {\n  const retries = deferredActorIds ? [] : undefined;\n  const nextState = resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, {\n    internalQueue,\n    deferredActorIds\n  }, retries);\n  retries?.forEach(([builtinAction, params]) => {\n    builtinAction.retryResolve(actorScope, nextState, params);\n  });\n  return nextState;\n}\nfunction macrostep(snapshot, event, actorScope, internalQueue) {\n  if (event.type === WILDCARD) {\n    throw new Error(`An event cannot have the wildcard type ('${WILDCARD}')`);\n  }\n  let nextSnapshot = snapshot;\n  const microstates = [];\n  function addMicrostate(microstate, event, transitions) {\n    actorScope.system._sendInspectionEvent({\n      type: '@xstate.microstep',\n      actorRef: actorScope.self,\n      event,\n      snapshot: microstate,\n      _transitions: transitions\n    });\n    microstates.push(microstate);\n  }\n\n  // Handle stop event\n  if (event.type === XSTATE_STOP) {\n    nextSnapshot = cloneMachineSnapshot(stopChildren(nextSnapshot, event, actorScope), {\n      status: 'stopped'\n    });\n    addMicrostate(nextSnapshot, event, []);\n    return {\n      snapshot: nextSnapshot,\n      microstates\n    };\n  }\n  let nextEvent = event;\n\n  // Assume the state is at rest (no raised events)\n  // Determine the next state based on the next microstep\n  if (nextEvent.type !== XSTATE_INIT) {\n    const currentEvent = nextEvent;\n    const isErr = isErrorActorEvent(currentEvent);\n    const transitions = selectTransitions(currentEvent, nextSnapshot);\n    if (isErr && !transitions.length) {\n      // TODO: we should likely only allow transitions selected by very explicit descriptors\n      // `*` shouldn't be matched, likely `xstate.error.*` shouldnt be either\n      // similarly `xstate.error.actor.*` and `xstate.error.actor.todo.*` have to be considered too\n      nextSnapshot = cloneMachineSnapshot(snapshot, {\n        status: 'error',\n        error: currentEvent.error\n      });\n      addMicrostate(nextSnapshot, currentEvent, []);\n      return {\n        snapshot: nextSnapshot,\n        microstates\n      };\n    }\n    nextSnapshot = microstep(transitions, snapshot, actorScope, nextEvent, false,\n    // isInitial\n    internalQueue);\n    addMicrostate(nextSnapshot, currentEvent, transitions);\n  }\n  let shouldSelectEventlessTransitions = true;\n  while (nextSnapshot.status === 'active') {\n    let enabledTransitions = shouldSelectEventlessTransitions ? selectEventlessTransitions(nextSnapshot, nextEvent) : [];\n\n    // eventless transitions should always be selected after selecting *regular* transitions\n    // by assigning `undefined` to `previousState` we ensure that `shouldSelectEventlessTransitions` gets always computed to true in such a case\n    const previousState = enabledTransitions.length ? nextSnapshot : undefined;\n    if (!enabledTransitions.length) {\n      if (!internalQueue.length) {\n        break;\n      }\n      nextEvent = internalQueue.shift();\n      enabledTransitions = selectTransitions(nextEvent, nextSnapshot);\n    }\n    nextSnapshot = microstep(enabledTransitions, nextSnapshot, actorScope, nextEvent, false, internalQueue);\n    shouldSelectEventlessTransitions = nextSnapshot !== previousState;\n    addMicrostate(nextSnapshot, nextEvent, enabledTransitions);\n  }\n  if (nextSnapshot.status !== 'active') {\n    stopChildren(nextSnapshot, nextEvent, actorScope);\n  }\n  return {\n    snapshot: nextSnapshot,\n    microstates\n  };\n}\nfunction stopChildren(nextState, event, actorScope) {\n  return resolveActionsAndContext(nextState, event, actorScope, Object.values(nextState.children).map(child => stopChild(child)), [], undefined);\n}\nfunction selectTransitions(event, nextState) {\n  return nextState.machine.getTransitionData(nextState, event);\n}\nfunction selectEventlessTransitions(nextState, event) {\n  const enabledTransitionSet = new Set();\n  const atomicStates = nextState._nodes.filter(isAtomicStateNode);\n  for (const stateNode of atomicStates) {\n    loop: for (const s of [stateNode].concat(getProperAncestors(stateNode, undefined))) {\n      if (!s.always) {\n        continue;\n      }\n      for (const transition of s.always) {\n        if (transition.guard === undefined || evaluateGuard(transition.guard, nextState.context, event, nextState)) {\n          enabledTransitionSet.add(transition);\n          break loop;\n        }\n      }\n    }\n  }\n  return removeConflictingTransitions(Array.from(enabledTransitionSet), new Set(nextState._nodes), nextState.historyValue);\n}\n\n/**\n * Resolves a partial state value with its full representation in the state\n * node's machine.\n *\n * @param stateValue The partial state value to resolve.\n */\nfunction resolveStateValue(rootNode, stateValue) {\n  const allStateNodes = getAllStateNodes(getStateNodes(rootNode, stateValue));\n  return getStateValue(rootNode, [...allStateNodes]);\n}\n\nfunction isMachineSnapshot(value) {\n  return !!value && typeof value === 'object' && 'machine' in value && 'value' in value;\n}\nconst machineSnapshotMatches = function matches(testValue) {\n  return matchesState(testValue, this.value);\n};\nconst machineSnapshotHasTag = function hasTag(tag) {\n  return this.tags.has(tag);\n};\nconst machineSnapshotCan = function can(event) {\n  if (!this.machine) {\n    console.warn(`state.can(...) used outside of a machine-created State object; this will always return false.`);\n  }\n  const transitionData = this.machine.getTransitionData(this, event);\n  return !!transitionData?.length &&\n  // Check that at least one transition is not forbidden\n  transitionData.some(t => t.target !== undefined || t.actions.length);\n};\nconst machineSnapshotToJSON = function toJSON() {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    getMeta,\n    toJSON,\n    can,\n    hasTag,\n    matches,\n    ...jsonValues\n  } = this;\n  return {\n    ...jsonValues,\n    tags: Array.from(tags)\n  };\n};\nconst machineSnapshotGetMeta = function getMeta() {\n  return this._nodes.reduce((acc, stateNode) => {\n    if (stateNode.meta !== undefined) {\n      acc[stateNode.id] = stateNode.meta;\n    }\n    return acc;\n  }, {});\n};\nfunction createMachineSnapshot(config, machine) {\n  return {\n    status: config.status,\n    output: config.output,\n    error: config.error,\n    machine,\n    context: config.context,\n    _nodes: config._nodes,\n    value: getStateValue(machine.root, config._nodes),\n    tags: new Set(config._nodes.flatMap(sn => sn.tags)),\n    children: config.children,\n    historyValue: config.historyValue || {},\n    matches: machineSnapshotMatches,\n    hasTag: machineSnapshotHasTag,\n    can: machineSnapshotCan,\n    getMeta: machineSnapshotGetMeta,\n    toJSON: machineSnapshotToJSON\n  };\n}\nfunction cloneMachineSnapshot(snapshot, config = {}) {\n  return createMachineSnapshot({\n    ...snapshot,\n    ...config\n  }, snapshot.machine);\n}\nfunction getPersistedSnapshot(snapshot, options) {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    children,\n    context,\n    can,\n    hasTag,\n    matches,\n    getMeta,\n    toJSON,\n    ...jsonValues\n  } = snapshot;\n  const childrenJson = {};\n  for (const id in children) {\n    const child = children[id];\n    if (typeof child.src !== 'string' && (!options || !('__unsafeAllowInlineActors' in options))) {\n      throw new Error('An inline child actor cannot be persisted.');\n    }\n    childrenJson[id] = {\n      snapshot: child.getPersistedSnapshot(options),\n      src: child.src,\n      systemId: child._systemId,\n      syncSnapshot: child._syncSnapshot\n    };\n  }\n  const persisted = {\n    ...jsonValues,\n    context: persistContext(context),\n    children: childrenJson\n  };\n  return persisted;\n}\nfunction persistContext(contextPart) {\n  let copy;\n  for (const key in contextPart) {\n    const value = contextPart[key];\n    if (value && typeof value === 'object') {\n      if ('sessionId' in value && 'send' in value && 'ref' in value) {\n        copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n          ...contextPart\n        };\n        copy[key] = {\n          xstate$$type: $$ACTOR_TYPE,\n          id: value.id\n        };\n      } else {\n        const result = persistContext(value);\n        if (result !== value) {\n          copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n            ...contextPart\n          };\n          copy[key] = result;\n        }\n      }\n    }\n  }\n  return copy ?? contextPart;\n}\n\nfunction resolveRaise(_, snapshot, args, actionParams, {\n  event: eventOrExpr,\n  id,\n  delay\n}, {\n  internalQueue\n}) {\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    `Only event objects may be used with raise; use raise({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  if (typeof resolvedDelay !== 'number') {\n    internalQueue.push(resolvedEvent);\n  }\n  return [snapshot, {\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }, undefined];\n}\nfunction executeRaise(actorScope, params) {\n  const {\n    event,\n    delay,\n    id\n  } = params;\n  if (typeof delay === 'number') {\n    actorScope.defer(() => {\n      const self = actorScope.self;\n      actorScope.system.scheduler.schedule(self, self, event, delay, id);\n    });\n    return;\n  }\n}\n/**\n * Raises an event. This places the event in the internal event queue, so that\n * the event is immediately consumed by the machine in the current step.\n *\n * @param eventType The event to raise.\n */\nfunction raise(eventOrExpr, options) {\n  if (executingCustomAction) {\n    console.warn('Custom actions should not call `raise()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');\n  }\n  function raise(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  raise.type = 'xstate.raise';\n  raise.event = eventOrExpr;\n  raise.id = options?.id;\n  raise.delay = options?.delay;\n  raise.resolve = resolveRaise;\n  raise.execute = executeRaise;\n  return raise;\n}\n\nexport { $$ACTOR_TYPE as $, createActor as A, Actor as B, interpret as C, and as D, not as E, or as F, stateIn as G, isMachineSnapshot as H, getAllOwnEventDescriptors as I, matchesState as J, pathToStateValue as K, toObserver as L, cancel as M, NULL_EVENT as N, raise as O, spawnChild as P, stop as Q, stopChild as R, STATE_DELIMITER as S, ProcessingStatus as T, cloneMachineSnapshot as U, executingCustomAction as V, XSTATE_ERROR as W, XSTATE_STOP as X, createErrorActorEvent as Y, toTransitionConfigArray as a, formatTransition as b, createInvokeId as c, formatInitialTransition as d, evaluateGuard as e, formatTransitions as f, getDelayedTransitions as g, getCandidates as h, getAllStateNodes as i, getStateNodes as j, createMachineSnapshot as k, isInFinalState as l, mapValues as m, macrostep as n, transitionNode as o, resolveActionsAndContext as p, createInitEvent as q, resolveStateValue as r, microstep as s, toArray as t, getInitialStateNodes as u, toStatePath as v, isStateId as w, getStateNodeByPath as x, getPersistedSnapshot as y, resolveReferencedActor as z };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2668, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2674, "column": 0}, "map": {"version":3,"sources":["file:///Users/ypeskov/Projects/CMS/Sanity3/nextjs-app/node_modules/xstate/dist/log-ef30c65f.development.esm.js"],"sourcesContent":["import { T as ProcessingStatus, z as resolveReferencedActor, A as createActor, U as cloneMachineSnapshot, V as executingCustomAction, W as XSTATE_ERROR, Y as createErrorActorEvent, e as evaluateGuard, M as cancel, O as raise, P as spawnChild, R as stopChild } from './raise-1db27a82.development.esm.js';\n\nfunction createSpawner(actorScope, {\n  machine,\n  context\n}, event, spawnedChildren) {\n  const spawn = (src, options = {}) => {\n    const {\n      systemId,\n      input\n    } = options;\n    if (typeof src === 'string') {\n      const logic = resolveReferencedActor(machine, src);\n      if (!logic) {\n        throw new Error(`Actor logic '${src}' not implemented in machine '${machine.id}'`);\n      }\n      const actorRef = createActor(logic, {\n        id: options.id,\n        parent: actorScope.self,\n        syncSnapshot: options.syncSnapshot,\n        input: typeof input === 'function' ? input({\n          context,\n          event,\n          self: actorScope.self\n        }) : input,\n        src,\n        systemId\n      });\n      spawnedChildren[actorRef.id] = actorRef;\n      return actorRef;\n    } else {\n      const actorRef = createActor(src, {\n        id: options.id,\n        parent: actorScope.self,\n        syncSnapshot: options.syncSnapshot,\n        input: options.input,\n        src,\n        systemId\n      });\n      return actorRef;\n    }\n  };\n  return (src, options) => {\n    const actorRef = spawn(src, options); // TODO: fix types\n    spawnedChildren[actorRef.id] = actorRef;\n    actorScope.defer(() => {\n      if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n        return;\n      }\n      actorRef.start();\n    });\n    return actorRef;\n  };\n}\n\nfunction resolveAssign(actorScope, snapshot, actionArgs, actionParams, {\n  assignment\n}) {\n  if (!snapshot.context) {\n    throw new Error('Cannot assign to undefined `context`. Ensure that `context` is defined in the machine config.');\n  }\n  const spawnedChildren = {};\n  const assignArgs = {\n    context: snapshot.context,\n    event: actionArgs.event,\n    spawn: createSpawner(actorScope, snapshot, actionArgs.event, spawnedChildren),\n    self: actorScope.self,\n    system: actorScope.system\n  };\n  let partialUpdate = {};\n  if (typeof assignment === 'function') {\n    partialUpdate = assignment(assignArgs, actionParams);\n  } else {\n    for (const key of Object.keys(assignment)) {\n      const propAssignment = assignment[key];\n      partialUpdate[key] = typeof propAssignment === 'function' ? propAssignment(assignArgs, actionParams) : propAssignment;\n    }\n  }\n  const updatedContext = Object.assign({}, snapshot.context, partialUpdate);\n  return [cloneMachineSnapshot(snapshot, {\n    context: updatedContext,\n    children: Object.keys(spawnedChildren).length ? {\n      ...snapshot.children,\n      ...spawnedChildren\n    } : snapshot.children\n  }), undefined, undefined];\n}\n/**\n * Updates the current context of the machine.\n *\n * @example\n *\n * ```ts\n * import { createMachine, assign } from 'xstate';\n *\n * const countMachine = createMachine({\n *   context: {\n *     count: 0,\n *     message: ''\n *   },\n *   on: {\n *     inc: {\n *       actions: assign({\n *         count: ({ context }) => context.count + 1\n *       })\n *     },\n *     updateMessage: {\n *       actions: assign(({ context, event }) => {\n *         return {\n *           message: event.message.trim()\n *         };\n *       })\n *     }\n *   }\n * });\n * ```\n *\n * @param assignment An object that represents the partial context to update, or\n *   a function that returns an object that represents the partial context to\n *   update.\n */\nfunction assign(assignment) {\n  if (executingCustomAction) {\n    console.warn('Custom actions should not call `assign()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');\n  }\n  function assign(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  assign.type = 'xstate.assign';\n  assign.assignment = assignment;\n  assign.resolve = resolveAssign;\n  return assign;\n}\n\nfunction resolveEmit(_, snapshot, args, actionParams, {\n  event: eventOrExpr\n}) {\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  return [snapshot, {\n    event: resolvedEvent\n  }, undefined];\n}\nfunction executeEmit(actorScope, {\n  event\n}) {\n  actorScope.defer(() => actorScope.emit(event));\n}\n/**\n * Emits an event to event handlers registered on the actor via `actor.on(event,\n * handler)`.\n *\n * @example\n *\n * ```ts\n * import { emit } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     something: {\n *       actions: emit({\n *         type: 'emitted',\n *         some: 'data'\n *       })\n *     }\n *   }\n *   // ...\n * });\n *\n * const actor = createActor(machine).start();\n *\n * actor.on('emitted', (event) => {\n *   console.log(event);\n * });\n *\n * actor.send({ type: 'something' });\n * // logs:\n * // {\n * //   type: 'emitted',\n * //   some: 'data'\n * // }\n * ```\n */\nfunction emit(/** The event to emit, or an expression that returns an event to emit. */\neventOrExpr) {\n  if (executingCustomAction) {\n    console.warn('Custom actions should not call `emit()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');\n  }\n  function emit(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  emit.type = 'xstate.emit';\n  emit.event = eventOrExpr;\n  emit.resolve = resolveEmit;\n  emit.execute = executeEmit;\n  return emit;\n}\n\n/**\n * @remarks\n * `T | unknown` reduces to `unknown` and that can be problematic when it comes\n * to contextual typing. It especially is a problem when the union has a\n * function member, like here:\n *\n * ```ts\n * declare function test(\n *   cbOrVal: ((arg: number) => unknown) | unknown\n * ): void;\n * test((arg) => {}); // oops, implicit any\n * ```\n *\n * This type can be used to avoid this problem. This union represents the same\n * value space as `unknown`.\n */\n\n// https://github.com/microsoft/TypeScript/issues/23182#issuecomment-379091887\n\n// @TODO: Replace with native `NoInfer` when TS issue gets fixed:\n// https://github.com/microsoft/TypeScript/pull/57673\n\n/** @deprecated Use the built-in `NoInfer` type instead */\n\n/** The full definition of an event, with a string `type`. */\n\n/**\n * The string or object representing the state value relative to the parent\n * state node.\n *\n * @remarks\n * - For a child atomic state node, this is a string, e.g., `\"pending\"`.\n * - For complex state nodes, this is an object, e.g., `{ success:\n *   \"someChildState\" }`.\n */\n\n/** @deprecated Use `AnyMachineSnapshot` instead */\n\n// TODO: possibly refactor this somehow, use even a simpler type, and maybe even make `machine.options` private or something\n/** @ignore */\n\nlet SpecialTargets = /*#__PURE__*/function (SpecialTargets) {\n  SpecialTargets[\"Parent\"] = \"#_parent\";\n  SpecialTargets[\"Internal\"] = \"#_internal\";\n  return SpecialTargets;\n}({});\n\n/** @deprecated Use `AnyActor` instead. */\n\n// Based on RxJS types\n\n// TODO: in v6, this should only accept AnyActorLogic, like ActorRefFromLogic\n\n/** @deprecated Use `Actor<T>` instead. */\n\n/**\n * Represents logic which can be used by an actor.\n *\n * @template TSnapshot - The type of the snapshot.\n * @template TEvent - The type of the event object.\n * @template TInput - The type of the input.\n * @template TSystem - The type of the actor system.\n */\n\n/** @deprecated */\n\n// TODO: cover all that can be actually returned\n\nfunction resolveSendTo(actorScope, snapshot, args, actionParams, {\n  to,\n  event: eventOrExpr,\n  id,\n  delay\n}, extra) {\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    `Only event objects may be used with sendTo; use sendTo({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  const resolvedTarget = typeof to === 'function' ? to(args, actionParams) : to;\n  let targetActorRef;\n  if (typeof resolvedTarget === 'string') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n    if (resolvedTarget === SpecialTargets.Parent) {\n      targetActorRef = actorScope.self._parent;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n    else if (resolvedTarget === SpecialTargets.Internal) {\n      targetActorRef = actorScope.self;\n    } else if (resolvedTarget.startsWith('#_')) {\n      // SCXML compatibility: https://www.w3.org/TR/scxml/#SCXMLEventProcessor\n      // #_invokeid. If the target is the special term '#_invokeid', where invokeid is the invokeid of an SCXML session that the sending session has created by <invoke>, the Processor must add the event to the external queue of that session.\n      targetActorRef = snapshot.children[resolvedTarget.slice(2)];\n    } else {\n      targetActorRef = extra.deferredActorIds?.includes(resolvedTarget) ? resolvedTarget : snapshot.children[resolvedTarget];\n    }\n    if (!targetActorRef) {\n      throw new Error(`Unable to send event to actor '${resolvedTarget}' from machine '${snapshot.machine.id}'.`);\n    }\n  } else {\n    targetActorRef = resolvedTarget || actorScope.self;\n  }\n  return [snapshot, {\n    to: targetActorRef,\n    targetId: typeof resolvedTarget === 'string' ? resolvedTarget : undefined,\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }, undefined];\n}\nfunction retryResolveSendTo(_, snapshot, params) {\n  if (typeof params.to === 'string') {\n    params.to = snapshot.children[params.to];\n  }\n}\nfunction executeSendTo(actorScope, params) {\n  // this forms an outgoing events queue\n  // thanks to that the recipient actors are able to read the *updated* snapshot value of the sender\n  actorScope.defer(() => {\n    const {\n      to,\n      event,\n      delay,\n      id\n    } = params;\n    if (typeof delay === 'number') {\n      actorScope.system.scheduler.schedule(actorScope.self, to, event, delay, id);\n      return;\n    }\n    actorScope.system._relay(actorScope.self,\n    // at this point, in a deferred task, it should already be mutated by retryResolveSendTo\n    // if it initially started as a string\n    to, event.type === XSTATE_ERROR ? createErrorActorEvent(actorScope.self.id, event.data) : event);\n  });\n}\n/**\n * Sends an event to an actor.\n *\n * @param actor The `ActorRef` to send the event to.\n * @param event The event to send, or an expression that evaluates to the event\n *   to send\n * @param options Send action options\n *\n *   - `id` - The unique send event identifier (used with `cancel()`).\n *   - `delay` - The number of milliseconds to delay the sending of the event.\n */\nfunction sendTo(to, eventOrExpr, options) {\n  if (executingCustomAction) {\n    console.warn('Custom actions should not call `sendTo()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');\n  }\n  function sendTo(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  sendTo.type = 'xstate.sendTo';\n  sendTo.to = to;\n  sendTo.event = eventOrExpr;\n  sendTo.id = options?.id;\n  sendTo.delay = options?.delay;\n  sendTo.resolve = resolveSendTo;\n  sendTo.retryResolve = retryResolveSendTo;\n  sendTo.execute = executeSendTo;\n  return sendTo;\n}\n\n/**\n * Sends an event to this machine's parent.\n *\n * @param event The event to send to the parent machine.\n * @param options Options to pass into the send event.\n */\nfunction sendParent(event, options) {\n  return sendTo(SpecialTargets.Parent, event, options);\n}\n/**\n * Forwards (sends) an event to the `target` actor.\n *\n * @param target The target actor to forward the event to.\n * @param options Options to pass into the send action creator.\n */\nfunction forwardTo(target, options) {\n  if ((!target || typeof target === 'function')) {\n    const originalTarget = target;\n    target = (...args) => {\n      const resolvedTarget = typeof originalTarget === 'function' ? originalTarget(...args) : originalTarget;\n      if (!resolvedTarget) {\n        throw new Error(`Attempted to forward event to undefined actor. This risks an infinite loop in the sender.`);\n      }\n      return resolvedTarget;\n    };\n  }\n  return sendTo(target, ({\n    event\n  }) => event, options);\n}\n\nfunction resolveEnqueueActions(actorScope, snapshot, args, actionParams, {\n  collect\n}) {\n  const actions = [];\n  const enqueue = function enqueue(action) {\n    actions.push(action);\n  };\n  enqueue.assign = (...args) => {\n    actions.push(assign(...args));\n  };\n  enqueue.cancel = (...args) => {\n    actions.push(cancel(...args));\n  };\n  enqueue.raise = (...args) => {\n    // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)\n    // then it fails to typecheck that because `...args` use `string` in place of `TDelay`\n    actions.push(raise(...args));\n  };\n  enqueue.sendTo = (...args) => {\n    // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)\n    // then it fails to typecheck that because `...args` use `string` in place of `TDelay\n    actions.push(sendTo(...args));\n  };\n  enqueue.sendParent = (...args) => {\n    actions.push(sendParent(...args));\n  };\n  enqueue.spawnChild = (...args) => {\n    actions.push(spawnChild(...args));\n  };\n  enqueue.stopChild = (...args) => {\n    actions.push(stopChild(...args));\n  };\n  enqueue.emit = (...args) => {\n    actions.push(emit(...args));\n  };\n  collect({\n    context: args.context,\n    event: args.event,\n    enqueue,\n    check: guard => evaluateGuard(guard, snapshot.context, args.event, snapshot),\n    self: actorScope.self,\n    system: actorScope.system\n  }, actionParams);\n  return [snapshot, undefined, actions];\n}\n/**\n * Creates an action object that will execute actions that are queued by the\n * `enqueue(action)` function.\n *\n * @example\n *\n * ```ts\n * import { createMachine, enqueueActions } from 'xstate';\n *\n * const machine = createMachine({\n *   entry: enqueueActions(({ enqueue, check }) => {\n *     enqueue.assign({ count: 0 });\n *\n *     if (check('someGuard')) {\n *       enqueue.assign({ count: 1 });\n *     }\n *\n *     enqueue('someAction');\n *   })\n * });\n * ```\n */\nfunction enqueueActions(collect) {\n  function enqueueActions(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  enqueueActions.type = 'xstate.enqueueActions';\n  enqueueActions.collect = collect;\n  enqueueActions.resolve = resolveEnqueueActions;\n  return enqueueActions;\n}\n\nfunction resolveLog(_, snapshot, actionArgs, actionParams, {\n  value,\n  label\n}) {\n  return [snapshot, {\n    value: typeof value === 'function' ? value(actionArgs, actionParams) : value,\n    label\n  }, undefined];\n}\nfunction executeLog({\n  logger\n}, {\n  value,\n  label\n}) {\n  if (label) {\n    logger(label, value);\n  } else {\n    logger(value);\n  }\n}\n/**\n * @param expr The expression function to evaluate which will be logged. Takes\n *   in 2 arguments:\n *\n *   - `ctx` - the current state context\n *   - `event` - the event that caused this action to be executed.\n *\n * @param label The label to give to the logged expression.\n */\nfunction log(value = ({\n  context,\n  event\n}) => ({\n  context,\n  event\n}), label) {\n  function log(_args, _params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  log.type = 'xstate.log';\n  log.value = value;\n  log.label = label;\n  log.resolve = resolveLog;\n  log.execute = executeLog;\n  return log;\n}\n\nexport { SpecialTargets as S, assign as a, enqueueActions as b, sendTo as c, emit as e, forwardTo as f, log as l, sendParent as s };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3166, "column": 0}, "map": {"version":3,"sources":["file:///Users/ypeskov/Projects/CMS/Sanity3/nextjs-app/node_modules/xstate/dist/xstate.development.esm.js"],"sourcesContent":["export { createEmptyActor, fromCallback, fromEventObservable, fromObservable, fromPromise, fromTransition } from '../actors/dist/xstate-actors.development.esm.js';\nimport { t as toArray, S as STATE_DELIMITER, m as mapValues, f as formatTransitions, a as toTransitionConfigArray, b as formatTransition, N as NULL_EVENT, e as evaluateGuard, c as createInvokeId, g as getDelayedTransitions, d as formatInitialTransition, h as getCandidates, r as resolveStateValue, i as getAllStateNodes, j as getStateNodes, k as createMachineSnapshot, l as isInFinalState, n as macrostep, o as transitionNode, p as resolveActionsAndContext, q as createInitEvent, s as microstep, u as getInitialStateNodes, v as toStatePath, w as isStateId, x as getStateNodeByPath, y as getPersistedSnapshot, z as resolveReferencedActor, A as createActor, $ as $$ACTOR_TYPE } from './raise-1db27a82.development.esm.js';\nexport { B as Actor, I as __unsafe_getAllOwnEventDescriptors, D as and, M as cancel, A as createActor, j as getStateNodes, C as interpret, H as isMachineSnapshot, J as matchesState, E as not, F as or, K as pathToStateValue, O as raise, P as spawnChild, G as stateIn, Q as stop, R as stopChild, L as toObserver } from './raise-1db27a82.development.esm.js';\nimport { a as assign } from './log-ef30c65f.development.esm.js';\nexport { S as SpecialTargets, a as assign, e as emit, b as enqueueActions, f as forwardTo, l as log, s as sendParent, c as sendTo } from './log-ef30c65f.development.esm.js';\nimport '../dev/dist/xstate-dev.development.esm.js';\n\n/**\n * Asserts that the given event object is of the specified type or types. Throws\n * an error if the event object is not of the specified types.\n *\n * @example\n *\n * ```ts\n * // ...\n * entry: ({ event }) => {\n *   assertEvent(event, 'doNothing');\n *   // event is { type: 'doNothing' }\n * },\n * // ...\n * exit: ({ event }) => {\n *   assertEvent(event, 'greet');\n *   // event is { type: 'greet'; message: string }\n *\n *   assertEvent(event, ['greet', 'notify']);\n *   // event is { type: 'greet'; message: string }\n *   // or { type: 'notify'; message: string; level: 'info' | 'error' }\n * },\n * ```\n */\nfunction assertEvent(event, type) {\n  const types = toArray(type);\n  if (!types.includes(event.type)) {\n    const typesText = types.length === 1 ? `type \"${types[0]}\"` : `one of types \"${types.join('\", \"')}\"`;\n    throw new Error(`Expected event ${JSON.stringify(event)} to have ${typesText}`);\n  }\n}\n\nconst cache = new WeakMap();\nfunction memo(object, key, fn) {\n  let memoizedData = cache.get(object);\n  if (!memoizedData) {\n    memoizedData = {\n      [key]: fn()\n    };\n    cache.set(object, memoizedData);\n  } else if (!(key in memoizedData)) {\n    memoizedData[key] = fn();\n  }\n  return memoizedData[key];\n}\n\nconst EMPTY_OBJECT = {};\nconst toSerializableAction = action => {\n  if (typeof action === 'string') {\n    return {\n      type: action\n    };\n  }\n  if (typeof action === 'function') {\n    if ('resolve' in action) {\n      return {\n        type: action.type\n      };\n    }\n    return {\n      type: action.name\n    };\n  }\n  return action;\n};\nclass StateNode {\n  constructor(/** The raw config used to create the machine. */\n  config, options) {\n    this.config = config;\n    /**\n     * The relative key of the state node, which represents its location in the\n     * overall state value.\n     */\n    this.key = void 0;\n    /** The unique ID of the state node. */\n    this.id = void 0;\n    /**\n     * The type of this state node:\n     *\n     * - `'atomic'` - no child state nodes\n     * - `'compound'` - nested child state nodes (XOR)\n     * - `'parallel'` - orthogonal nested child state nodes (AND)\n     * - `'history'` - history state node\n     * - `'final'` - final state node\n     */\n    this.type = void 0;\n    /** The string path from the root machine node to this node. */\n    this.path = void 0;\n    /** The child state nodes. */\n    this.states = void 0;\n    /**\n     * The type of history on this state node. Can be:\n     *\n     * - `'shallow'` - recalls only top-level historical state value\n     * - `'deep'` - recalls historical state value at all levels\n     */\n    this.history = void 0;\n    /** The action(s) to be executed upon entering the state node. */\n    this.entry = void 0;\n    /** The action(s) to be executed upon exiting the state node. */\n    this.exit = void 0;\n    /** The parent state node. */\n    this.parent = void 0;\n    /** The root machine node. */\n    this.machine = void 0;\n    /**\n     * The meta data associated with this state node, which will be returned in\n     * State instances.\n     */\n    this.meta = void 0;\n    /**\n     * The output data sent with the \"xstate.done.state._id_\" event if this is a\n     * final state node.\n     */\n    this.output = void 0;\n    /**\n     * The order this state node appears. Corresponds to the implicit document\n     * order.\n     */\n    this.order = -1;\n    this.description = void 0;\n    this.tags = [];\n    this.transitions = void 0;\n    this.always = void 0;\n    this.parent = options._parent;\n    this.key = options._key;\n    this.machine = options._machine;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.id = this.config.id || [this.machine.id, ...this.path].join(STATE_DELIMITER);\n    this.type = this.config.type || (this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.description = this.config.description;\n    this.order = this.machine.idMap.size;\n    this.machine.idMap.set(this.id, this);\n    this.states = this.config.states ? mapValues(this.config.states, (stateConfig, key) => {\n      const stateNode = new StateNode(stateConfig, {\n        _parent: this,\n        _key: key,\n        _machine: this.machine\n      });\n      return stateNode;\n    }) : EMPTY_OBJECT;\n    if (this.type === 'compound' && !this.config.initial) {\n      throw new Error(`No initial state specified for compound state node \"#${this.id}\". Try adding { initial: \"${Object.keys(this.states)[0]}\" } to the state config.`);\n    }\n\n    // History config\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this.entry = toArray(this.config.entry).slice();\n    this.exit = toArray(this.config.exit).slice();\n    this.meta = this.config.meta;\n    this.output = this.type === 'final' || !this.parent ? this.config.output : undefined;\n    this.tags = toArray(config.tags).slice();\n  }\n\n  /** @internal */\n  _initialize() {\n    this.transitions = formatTransitions(this);\n    if (this.config.always) {\n      this.always = toTransitionConfigArray(this.config.always).map(t => formatTransition(this, NULL_EVENT, t));\n    }\n    Object.keys(this.states).forEach(key => {\n      this.states[key]._initialize();\n    });\n  }\n\n  /** The well-structured state node definition. */\n  get definition() {\n    return {\n      id: this.id,\n      key: this.key,\n      version: this.machine.version,\n      type: this.type,\n      initial: this.initial ? {\n        target: this.initial.target,\n        source: this,\n        actions: this.initial.actions.map(toSerializableAction),\n        eventType: null,\n        reenter: false,\n        toJSON: () => ({\n          target: this.initial.target.map(t => `#${t.id}`),\n          source: `#${this.id}`,\n          actions: this.initial.actions.map(toSerializableAction),\n          eventType: null\n        })\n      } : undefined,\n      history: this.history,\n      states: mapValues(this.states, state => {\n        return state.definition;\n      }),\n      on: this.on,\n      transitions: [...this.transitions.values()].flat().map(t => ({\n        ...t,\n        actions: t.actions.map(toSerializableAction)\n      })),\n      entry: this.entry.map(toSerializableAction),\n      exit: this.exit.map(toSerializableAction),\n      meta: this.meta,\n      order: this.order || -1,\n      output: this.output,\n      invoke: this.invoke,\n      description: this.description,\n      tags: this.tags\n    };\n  }\n\n  /** @internal */\n  toJSON() {\n    return this.definition;\n  }\n\n  /** The logic invoked as actors by this state node. */\n  get invoke() {\n    return memo(this, 'invoke', () => toArray(this.config.invoke).map((invokeConfig, i) => {\n      const {\n        src,\n        systemId\n      } = invokeConfig;\n      const resolvedId = invokeConfig.id ?? createInvokeId(this.id, i);\n      const sourceName = typeof src === 'string' ? src : `xstate.invoke.${createInvokeId(this.id, i)}`;\n      return {\n        ...invokeConfig,\n        src: sourceName,\n        id: resolvedId,\n        systemId: systemId,\n        toJSON() {\n          const {\n            onDone,\n            onError,\n            ...invokeDefValues\n          } = invokeConfig;\n          return {\n            ...invokeDefValues,\n            type: 'xstate.invoke',\n            src: sourceName,\n            id: resolvedId\n          };\n        }\n      };\n    }));\n  }\n\n  /** The mapping of events to transitions. */\n  get on() {\n    return memo(this, 'on', () => {\n      const transitions = this.transitions;\n      return [...transitions].flatMap(([descriptor, t]) => t.map(t => [descriptor, t])).reduce((map, [descriptor, transition]) => {\n        map[descriptor] = map[descriptor] || [];\n        map[descriptor].push(transition);\n        return map;\n      }, {});\n    });\n  }\n  get after() {\n    return memo(this, 'delayedTransitions', () => getDelayedTransitions(this));\n  }\n  get initial() {\n    return memo(this, 'initial', () => formatInitialTransition(this, this.config.initial));\n  }\n\n  /** @internal */\n  next(snapshot, event) {\n    const eventType = event.type;\n    const actions = [];\n    let selectedTransition;\n    const candidates = memo(this, `candidates-${eventType}`, () => getCandidates(this, eventType));\n    for (const candidate of candidates) {\n      const {\n        guard\n      } = candidate;\n      const resolvedContext = snapshot.context;\n      let guardPassed = false;\n      try {\n        guardPassed = !guard || evaluateGuard(guard, resolvedContext, event, snapshot);\n      } catch (err) {\n        const guardType = typeof guard === 'string' ? guard : typeof guard === 'object' ? guard.type : undefined;\n        throw new Error(`Unable to evaluate guard ${guardType ? `'${guardType}' ` : ''}in transition for event '${eventType}' in state node '${this.id}':\\n${err.message}`);\n      }\n      if (guardPassed) {\n        actions.push(...candidate.actions);\n        selectedTransition = candidate;\n        break;\n      }\n    }\n    return selectedTransition ? [selectedTransition] : undefined;\n  }\n\n  /** All the event types accepted by this state node and its descendants. */\n  get events() {\n    return memo(this, 'events', () => {\n      const {\n        states\n      } = this;\n      const events = new Set(this.ownEvents);\n      if (states) {\n        for (const stateId of Object.keys(states)) {\n          const state = states[stateId];\n          if (state.states) {\n            for (const event of state.events) {\n              events.add(`${event}`);\n            }\n          }\n        }\n      }\n      return Array.from(events);\n    });\n  }\n\n  /**\n   * All the events that have transitions directly from this state node.\n   *\n   * Excludes any inert events.\n   */\n  get ownEvents() {\n    const events = new Set([...this.transitions.keys()].filter(descriptor => {\n      return this.transitions.get(descriptor).some(transition => !(!transition.target && !transition.actions.length && !transition.reenter));\n    }));\n    return Array.from(events);\n  }\n}\n\nconst STATE_IDENTIFIER = '#';\nclass StateMachine {\n  constructor(/** The raw config used to create the machine. */\n  config, implementations) {\n    this.config = config;\n    /** The machine's own version. */\n    this.version = void 0;\n    this.schemas = void 0;\n    this.implementations = void 0;\n    /** @internal */\n    this.__xstatenode = true;\n    /** @internal */\n    this.idMap = new Map();\n    this.root = void 0;\n    this.id = void 0;\n    this.states = void 0;\n    this.events = void 0;\n    this.id = config.id || '(machine)';\n    this.implementations = {\n      actors: implementations?.actors ?? {},\n      actions: implementations?.actions ?? {},\n      delays: implementations?.delays ?? {},\n      guards: implementations?.guards ?? {}\n    };\n    this.version = this.config.version;\n    this.schemas = this.config.schemas;\n    this.transition = this.transition.bind(this);\n    this.getInitialSnapshot = this.getInitialSnapshot.bind(this);\n    this.getPersistedSnapshot = this.getPersistedSnapshot.bind(this);\n    this.restoreSnapshot = this.restoreSnapshot.bind(this);\n    this.start = this.start.bind(this);\n    this.root = new StateNode(config, {\n      _key: this.id,\n      _machine: this\n    });\n    this.root._initialize();\n    this.states = this.root.states; // TODO: remove!\n    this.events = this.root.events;\n    if (!('output' in this.root) && Object.values(this.states).some(state => state.type === 'final' && 'output' in state)) {\n      console.warn('Missing `machine.output` declaration (top-level final state with output detected)');\n    }\n  }\n\n  /**\n   * Clones this state machine with the provided implementations and merges the\n   * `context` (if provided).\n   *\n   * @param implementations Options (`actions`, `guards`, `actors`, `delays`,\n   *   `context`) to recursively merge with the existing options.\n   * @returns A new `StateMachine` instance with the provided implementations.\n   */\n  provide(implementations) {\n    const {\n      actions,\n      guards,\n      actors,\n      delays\n    } = this.implementations;\n    return new StateMachine(this.config, {\n      actions: {\n        ...actions,\n        ...implementations.actions\n      },\n      guards: {\n        ...guards,\n        ...implementations.guards\n      },\n      actors: {\n        ...actors,\n        ...implementations.actors\n      },\n      delays: {\n        ...delays,\n        ...implementations.delays\n      }\n    });\n  }\n  resolveState(config) {\n    const resolvedStateValue = resolveStateValue(this.root, config.value);\n    const nodeSet = getAllStateNodes(getStateNodes(this.root, resolvedStateValue));\n    return createMachineSnapshot({\n      _nodes: [...nodeSet],\n      context: config.context || {},\n      children: {},\n      status: isInFinalState(nodeSet, this.root) ? 'done' : config.status || 'active',\n      output: config.output,\n      error: config.error,\n      historyValue: config.historyValue\n    }, this);\n  }\n\n  /**\n   * Determines the next snapshot given the current `snapshot` and received\n   * `event`. Calculates a full macrostep from all microsteps.\n   *\n   * @param snapshot The current snapshot\n   * @param event The received event\n   */\n  transition(snapshot, event, actorScope) {\n    return macrostep(snapshot, event, actorScope, []).snapshot;\n  }\n\n  /**\n   * Determines the next state given the current `state` and `event`. Calculates\n   * a microstep.\n   *\n   * @param state The current state\n   * @param event The received event\n   */\n  microstep(snapshot, event, actorScope) {\n    return macrostep(snapshot, event, actorScope, []).microstates;\n  }\n  getTransitionData(snapshot, event) {\n    return transitionNode(this.root, snapshot.value, snapshot, event) || [];\n  }\n\n  /**\n   * The initial state _before_ evaluating any microsteps. This \"pre-initial\"\n   * state is provided to initial actions executed in the initial state.\n   */\n  getPreInitialState(actorScope, initEvent, internalQueue) {\n    const {\n      context\n    } = this.config;\n    const preInitial = createMachineSnapshot({\n      context: typeof context !== 'function' && context ? context : {},\n      _nodes: [this.root],\n      children: {},\n      status: 'active'\n    }, this);\n    if (typeof context === 'function') {\n      const assignment = ({\n        spawn,\n        event,\n        self\n      }) => context({\n        spawn,\n        input: event.input,\n        self\n      });\n      return resolveActionsAndContext(preInitial, initEvent, actorScope, [assign(assignment)], internalQueue, undefined);\n    }\n    return preInitial;\n  }\n\n  /**\n   * Returns the initial `State` instance, with reference to `self` as an\n   * `ActorRef`.\n   */\n  getInitialSnapshot(actorScope, input) {\n    const initEvent = createInitEvent(input); // TODO: fix;\n    const internalQueue = [];\n    const preInitialState = this.getPreInitialState(actorScope, initEvent, internalQueue);\n    const nextState = microstep([{\n      target: [...getInitialStateNodes(this.root)],\n      source: this.root,\n      reenter: true,\n      actions: [],\n      eventType: null,\n      toJSON: null // TODO: fix\n    }], preInitialState, actorScope, initEvent, true, internalQueue);\n    const {\n      snapshot: macroState\n    } = macrostep(nextState, initEvent, actorScope, internalQueue);\n    return macroState;\n  }\n  start(snapshot) {\n    Object.values(snapshot.children).forEach(child => {\n      if (child.getSnapshot().status === 'active') {\n        child.start();\n      }\n    });\n  }\n  getStateNodeById(stateId) {\n    const fullPath = toStatePath(stateId);\n    const relativePath = fullPath.slice(1);\n    const resolvedStateId = isStateId(fullPath[0]) ? fullPath[0].slice(STATE_IDENTIFIER.length) : fullPath[0];\n    const stateNode = this.idMap.get(resolvedStateId);\n    if (!stateNode) {\n      throw new Error(`Child state node '#${resolvedStateId}' does not exist on machine '${this.id}'`);\n    }\n    return getStateNodeByPath(stateNode, relativePath);\n  }\n  get definition() {\n    return this.root.definition;\n  }\n  toJSON() {\n    return this.definition;\n  }\n  getPersistedSnapshot(snapshot, options) {\n    return getPersistedSnapshot(snapshot, options);\n  }\n  restoreSnapshot(snapshot, _actorScope) {\n    const children = {};\n    const snapshotChildren = snapshot.children;\n    Object.keys(snapshotChildren).forEach(actorId => {\n      const actorData = snapshotChildren[actorId];\n      const childState = actorData.snapshot;\n      const src = actorData.src;\n      const logic = typeof src === 'string' ? resolveReferencedActor(this, src) : src;\n      if (!logic) {\n        return;\n      }\n      const actorRef = createActor(logic, {\n        id: actorId,\n        parent: _actorScope.self,\n        syncSnapshot: actorData.syncSnapshot,\n        snapshot: childState,\n        src,\n        systemId: actorData.systemId\n      });\n      children[actorId] = actorRef;\n    });\n    const restoredSnapshot = createMachineSnapshot({\n      ...snapshot,\n      children,\n      _nodes: Array.from(getAllStateNodes(getStateNodes(this.root, snapshot.value)))\n    }, this);\n    const seen = new Set();\n    function reviveContext(contextPart, children) {\n      if (seen.has(contextPart)) {\n        return;\n      }\n      seen.add(contextPart);\n      for (const key in contextPart) {\n        const value = contextPart[key];\n        if (value && typeof value === 'object') {\n          if ('xstate$$type' in value && value.xstate$$type === $$ACTOR_TYPE) {\n            contextPart[key] = children[value.id];\n            continue;\n          }\n          reviveContext(value, children);\n        }\n      }\n    }\n    reviveContext(restoredSnapshot.context, children);\n    return restoredSnapshot;\n  }\n}\n\n/**\n * Creates a state machine (statechart) with the given configuration.\n *\n * The state machine represents the pure logic of a state machine actor.\n *\n * @example\n *\n * ```ts\n * import { createMachine } from 'xstate';\n *\n * const lightMachine = createMachine({\n *   id: 'light',\n *   initial: 'green',\n *   states: {\n *     green: {\n *       on: {\n *         TIMER: { target: 'yellow' }\n *       }\n *     },\n *     yellow: {\n *       on: {\n *         TIMER: { target: 'red' }\n *       }\n *     },\n *     red: {\n *       on: {\n *         TIMER: { target: 'green' }\n *       }\n *     }\n *   }\n * });\n *\n * const lightActor = createActor(lightMachine);\n * lightActor.start();\n *\n * lightActor.send({ type: 'TIMER' });\n * ```\n *\n * @param config The state machine configuration.\n * @param options DEPRECATED: use `setup({ ... })` or `machine.provide({ ... })`\n *   to provide machine implementations instead.\n */\nfunction createMachine(config, implementations) {\n  return new StateMachine(config, implementations);\n}\n\n/** @internal */\nfunction createInertActorScope(actorLogic) {\n  const self = createActor(actorLogic);\n  const inertActorScope = {\n    self,\n    defer: () => {},\n    id: '',\n    logger: () => {},\n    sessionId: '',\n    stopChild: () => {},\n    system: self.system,\n    emit: () => {},\n    actionExecutor: () => {}\n  };\n  return inertActorScope;\n}\n\n/** @deprecated Use `initialTransition(…)` instead. */\nfunction getInitialSnapshot(actorLogic, ...[input]) {\n  const actorScope = createInertActorScope(actorLogic);\n  return actorLogic.getInitialSnapshot(actorScope, input);\n}\n\n/**\n * Determines the next snapshot for the given `actorLogic` based on the given\n * `snapshot` and `event`.\n *\n * If the `snapshot` is `undefined`, the initial snapshot of the `actorLogic` is\n * used.\n *\n * @deprecated Use `transition(…)` instead.\n * @example\n *\n * ```ts\n * import { getNextSnapshot } from 'xstate';\n * import { trafficLightMachine } from './trafficLightMachine.ts';\n *\n * const nextSnapshot = getNextSnapshot(\n *   trafficLightMachine, // actor logic\n *   undefined, // snapshot (or initial state if undefined)\n *   { type: 'TIMER' }\n * ); // event object\n *\n * console.log(nextSnapshot.value);\n * // => 'yellow'\n *\n * const nextSnapshot2 = getNextSnapshot(\n *   trafficLightMachine, // actor logic\n *   nextSnapshot, // snapshot\n *   { type: 'TIMER' }\n * ); // event object\n *\n * console.log(nextSnapshot2.value);\n * // =>'red'\n * ```\n */\nfunction getNextSnapshot(actorLogic, snapshot, event) {\n  const inertActorScope = createInertActorScope(actorLogic);\n  inertActorScope.self._snapshot = snapshot;\n  return actorLogic.transition(snapshot, event, inertActorScope);\n}\n\n// at the moment we allow extra actors - ones that are not specified by `children`\n// this could be reconsidered in the future\n\nfunction setup({\n  schemas,\n  actors,\n  actions,\n  guards,\n  delays\n}) {\n  return {\n    createMachine: config => createMachine({\n      ...config,\n      schemas\n    }, {\n      actors,\n      actions,\n      guards,\n      delays\n    })\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass SimulatedClock {\n  constructor() {\n    this.timeouts = new Map();\n    this._now = 0;\n    this._id = 0;\n    this._flushing = false;\n    this._flushingInvalidated = false;\n  }\n  now() {\n    return this._now;\n  }\n  getId() {\n    return this._id++;\n  }\n  setTimeout(fn, timeout) {\n    this._flushingInvalidated = this._flushing;\n    const id = this.getId();\n    this.timeouts.set(id, {\n      start: this.now(),\n      timeout,\n      fn\n    });\n    return id;\n  }\n  clearTimeout(id) {\n    this._flushingInvalidated = this._flushing;\n    this.timeouts.delete(id);\n  }\n  set(time) {\n    if (this._now > time) {\n      throw new Error('Unable to travel back in time');\n    }\n    this._now = time;\n    this.flushTimeouts();\n  }\n  flushTimeouts() {\n    if (this._flushing) {\n      this._flushingInvalidated = true;\n      return;\n    }\n    this._flushing = true;\n    const sorted = [...this.timeouts].sort(([_idA, timeoutA], [_idB, timeoutB]) => {\n      const endA = timeoutA.start + timeoutA.timeout;\n      const endB = timeoutB.start + timeoutB.timeout;\n      return endB > endA ? -1 : 1;\n    });\n    for (const [id, timeout] of sorted) {\n      if (this._flushingInvalidated) {\n        this._flushingInvalidated = false;\n        this._flushing = false;\n        this.flushTimeouts();\n        return;\n      }\n      if (this.now() - timeout.start >= timeout.timeout) {\n        this.timeouts.delete(id);\n        timeout.fn.call(null);\n      }\n    }\n    this._flushing = false;\n  }\n  increment(ms) {\n    this._now += ms;\n    this.flushTimeouts();\n  }\n}\n\n/**\n * Returns a promise that resolves to the `output` of the actor when it is done.\n *\n * @example\n *\n * ```ts\n * const machine = createMachine({\n *   // ...\n *   output: {\n *     count: 42\n *   }\n * });\n *\n * const actor = createActor(machine);\n *\n * actor.start();\n *\n * const output = await toPromise(actor);\n *\n * console.log(output);\n * // logs { count: 42 }\n * ```\n */\nfunction toPromise(actor) {\n  return new Promise((resolve, reject) => {\n    actor.subscribe({\n      complete: () => {\n        resolve(actor.getSnapshot().output);\n      },\n      error: reject\n    });\n  });\n}\n\n/**\n * Given actor `logic`, a `snapshot`, and an `event`, returns a tuple of the\n * `nextSnapshot` and `actions` to execute.\n *\n * This is a pure function that does not execute `actions`.\n */\nfunction transition(logic, snapshot, event) {\n  const executableActions = [];\n  const actorScope = createInertActorScope(logic);\n  actorScope.actionExecutor = action => {\n    executableActions.push(action);\n  };\n  const nextSnapshot = logic.transition(snapshot, event, actorScope);\n  return [nextSnapshot, executableActions];\n}\n\n/**\n * Given actor `logic` and optional `input`, returns a tuple of the\n * `nextSnapshot` and `actions` to execute from the initial transition (no\n * previous state).\n *\n * This is a pure function that does not execute `actions`.\n */\nfunction initialTransition(logic, ...[input]) {\n  const executableActions = [];\n  const actorScope = createInertActorScope(logic);\n  actorScope.actionExecutor = action => {\n    executableActions.push(action);\n  };\n  const nextSnapshot = logic.getInitialSnapshot(actorScope, input);\n  return [nextSnapshot, executableActions];\n}\n\nconst defaultWaitForOptions = {\n  timeout: Infinity // much more than 10 seconds\n};\n\n/**\n * Subscribes to an actor ref and waits for its emitted value to satisfy a\n * predicate, and then resolves with that value. Will throw if the desired state\n * is not reached after an optional timeout. (defaults to Infinity).\n *\n * @example\n *\n * ```js\n * const state = await waitFor(someService, (state) => {\n *   return state.hasTag('loaded');\n * });\n *\n * state.hasTag('loaded'); // true\n * ```\n *\n * @param actorRef The actor ref to subscribe to\n * @param predicate Determines if a value matches the condition to wait for\n * @param options\n * @returns A promise that eventually resolves to the emitted value that matches\n *   the condition\n */\nfunction waitFor(actorRef, predicate, options) {\n  const resolvedOptions = {\n    ...defaultWaitForOptions,\n    ...options\n  };\n  return new Promise((res, rej) => {\n    const {\n      signal\n    } = resolvedOptions;\n    if (signal?.aborted) {\n      // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n      rej(signal.reason);\n      return;\n    }\n    let done = false;\n    if (resolvedOptions.timeout < 0) {\n      console.error('`timeout` passed to `waitFor` is negative and it will reject its internal promise immediately.');\n    }\n    const handle = resolvedOptions.timeout === Infinity ? undefined : setTimeout(() => {\n      dispose();\n      rej(new Error(`Timeout of ${resolvedOptions.timeout} ms exceeded`));\n    }, resolvedOptions.timeout);\n    const dispose = () => {\n      clearTimeout(handle);\n      done = true;\n      sub?.unsubscribe();\n      if (abortListener) {\n        signal.removeEventListener('abort', abortListener);\n      }\n    };\n    function checkEmitted(emitted) {\n      if (predicate(emitted)) {\n        dispose();\n        res(emitted);\n      }\n    }\n\n    /**\n     * If the `signal` option is provided, this will be the listener for its\n     * `abort` event\n     */\n    let abortListener;\n    // eslint-disable-next-line prefer-const\n    let sub; // avoid TDZ when disposing synchronously\n\n    // See if the current snapshot already matches the predicate\n    checkEmitted(actorRef.getSnapshot());\n    if (done) {\n      return;\n    }\n\n    // only define the `abortListener` if the `signal` option is provided\n    if (signal) {\n      abortListener = () => {\n        dispose();\n        // XState does not \"own\" the signal, so we should reject with its reason (if any)\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        rej(signal.reason);\n      };\n      signal.addEventListener('abort', abortListener);\n    }\n    sub = actorRef.subscribe({\n      next: checkEmitted,\n      error: err => {\n        dispose();\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        rej(err);\n      },\n      complete: () => {\n        dispose();\n        rej(new Error(`Actor terminated without satisfying predicate`));\n      }\n    });\n    if (done) {\n      sub.unsubscribe();\n    }\n  });\n}\n\nexport { SimulatedClock, StateMachine, StateNode, assertEvent, createMachine, getInitialSnapshot, getNextSnapshot, initialTransition, setup, toPromise, transition, waitFor };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4044, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4120, "column": 0}, "map": {"version":3,"sources":["file:///Users/ypeskov/Projects/CMS/Sanity3/nextjs-app/node_modules/xstate/actors/dist/xstate-actors.development.esm.js"],"sourcesContent":["import { X as XSTATE_STOP, A as createActor } from '../../dist/raise-1db27a82.development.esm.js';\nimport '../../dev/dist/xstate-dev.development.esm.js';\n\n/**\n * Represents an actor created by `fromTransition`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import {\n *   fromTransition,\n *   createActor,\n *   type AnyActorSystem\n * } from 'xstate';\n *\n * //* The actor's stored context.\n * type Context = {\n *   // The current count.\n *   count: number;\n *   // The amount to increase `count` by.\n *   step: number;\n * };\n * // The events the actor receives.\n * type Event = { type: 'increment' };\n * // The actor's input.\n * type Input = { step?: number };\n *\n * // Actor logic that increments `count` by `step` when it receives an event of\n * // type `increment`.\n * const logic = fromTransition<Context, Event, AnyActorSystem, Input>(\n *   (state, event, actorScope) => {\n *     actorScope.self;\n *     //         ^? TransitionActorRef<Context, Event>\n *\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + state.step\n *       };\n *     }\n *     return state;\n *   },\n *   ({ input, self }) => {\n *     self;\n *     // ^? TransitionActorRef<Context, Event>\n *\n *     return {\n *       count: 0,\n *       step: input.step ?? 1\n *     };\n *   }\n * );\n *\n * const actor = createActor(logic, { input: { step: 10 } });\n * //    ^? TransitionActorRef<Context, Event>\n * ```\n *\n * @see {@link fromTransition}\n */\n\n/**\n * Returns actor logic given a transition function and its initial state.\n *\n * A “transition function” is a function that takes the current `state` and\n * received `event` object as arguments, and returns the next state, similar to\n * a reducer.\n *\n * Actors created from transition logic (“transition actors”) can:\n *\n * - Receive events\n * - Emit snapshots of its state\n *\n * The transition function’s `state` is used as its transition actor’s\n * `context`.\n *\n * Note that the \"state\" for a transition function is provided by the initial\n * state argument, and is not the same as the State object of an actor or a\n * state within a machine configuration.\n *\n * @example\n *\n * ```ts\n * const transitionLogic = fromTransition(\n *   (state, event) => {\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + 1\n *       };\n *     }\n *     return state;\n *   },\n *   { count: 0 }\n * );\n *\n * const transitionActor = createActor(transitionLogic);\n * transitionActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * transitionActor.start();\n * // => {\n * //   status: 'active',\n * //   context: { count: 0 },\n * //   ...\n * // }\n *\n * transitionActor.send({ type: 'increment' });\n * // => {\n * //   status: 'active',\n * //   context: { count: 1 },\n * //   ...\n * // }\n * ```\n *\n * @param transition The transition function used to describe the transition\n *   logic. It should return the next state given the current state and event.\n *   It receives the following arguments:\n *\n *   - `state` - the current state.\n *   - `event` - the received event.\n *   - `actorScope` - the actor scope object, with properties like `self` and\n *       `system`.\n *\n * @param initialContext The initial state of the transition function, either an\n *   object representing the state, or a function which returns a state object.\n *   If a function, it will receive as its only argument an object with the\n *   following properties:\n *\n *   - `input` - the `input` provided to its parent transition actor.\n *   - `self` - a reference to its parent transition actor.\n *\n * @returns Actor logic\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromTransition(transition, initialContext) {\n  return {\n    config: transition,\n    transition: (snapshot, event, actorScope) => {\n      return {\n        ...snapshot,\n        context: transition(snapshot.context, event, actorScope)\n      };\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: typeof initialContext === 'function' ? initialContext({\n          input\n        }) : initialContext\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n}\n\nconst instanceStates = /* #__PURE__ */new WeakMap();\n\n/**\n * Represents an actor created by `fromCallback`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromCallback, createActor } from 'xstate';\n *\n * // The events the actor receives.\n * type Event = { type: 'someEvent' };\n * // The actor's input.\n * type Input = { name: string };\n *\n * // Actor logic that logs whenever it receives an event of type `someEvent`.\n * const logic = fromCallback<Event, Input>(({ self, input, receive }) => {\n *   self;\n *   // ^? CallbackActorRef<Event, Input>\n *\n *   receive((event) => {\n *     if (event.type === 'someEvent') {\n *       console.log(`${input.name}: received \"someEvent\" event`);\n *       // logs 'myActor: received \"someEvent\" event'\n *     }\n *   });\n * });\n *\n * const actor = createActor(logic, { input: { name: 'myActor' } });\n * //    ^? CallbackActorRef<Event, Input>\n * ```\n *\n * @see {@link fromCallback}\n */\n\n/**\n * An actor logic creator which returns callback logic as defined by a callback\n * function.\n *\n * @remarks\n * Useful for subscription-based or other free-form logic that can send events\n * back to the parent actor.\n *\n * Actors created from callback logic (“callback actors”) can:\n *\n * - Receive events via the `receive` function\n * - Send events to the parent actor via the `sendBack` function\n *\n * Callback actors are a bit different from other actors in that they:\n *\n * - Do not work with `onDone`\n * - Do not produce a snapshot using `.getSnapshot()`\n * - Do not emit values when used with `.subscribe()`\n * - Can not be stopped with `.stop()`\n *\n * @example\n *\n * ```typescript\n * const callbackLogic = fromCallback(({ sendBack, receive }) => {\n *   let lockStatus = 'unlocked';\n *\n *   const handler = (event) => {\n *     if (lockStatus === 'locked') {\n *       return;\n *     }\n *     sendBack(event);\n *   };\n *\n *   receive((event) => {\n *     if (event.type === 'lock') {\n *       lockStatus = 'locked';\n *     } else if (event.type === 'unlock') {\n *       lockStatus = 'unlocked';\n *     }\n *   });\n *\n *   document.body.addEventListener('click', handler);\n *\n *   return () => {\n *     document.body.removeEventListener('click', handler);\n *   };\n * });\n * ```\n *\n * @param callback - The callback function used to describe the callback logic\n *   The callback function is passed an object with the following properties:\n *\n *   - `receive` - A function that can send events back to the parent actor; the\n *       listener is then called whenever events are received by the callback\n *       actor\n *   - `sendBack` - A function that can send events back to the parent actor\n *   - `input` - Data that was provided to the callback actor\n *   - `self` - The parent actor of the callback actor\n *   - `system` - The actor system to which the callback actor belongs The callback\n *       function can (optionally) return a cleanup function, which is called\n *       when the actor is stopped.\n *\n * @returns Callback logic\n * @see {@link CallbackLogicFunction} for more information about the callback function and its object argument\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromCallback(callback) {\n  const logic = {\n    config: callback,\n    start: (state, actorScope) => {\n      const {\n        self,\n        system,\n        emit\n      } = actorScope;\n      const callbackState = {\n        receivers: undefined,\n        dispose: undefined\n      };\n      instanceStates.set(self, callbackState);\n      callbackState.dispose = callback({\n        input: state.input,\n        system,\n        self,\n        sendBack: event => {\n          if (self.getSnapshot().status === 'stopped') {\n            return;\n          }\n          if (self._parent) {\n            system._relay(self, self._parent, event);\n          }\n        },\n        receive: listener => {\n          callbackState.receivers ??= new Set();\n          callbackState.receivers.add(listener);\n        },\n        emit\n      });\n    },\n    transition: (state, event, actorScope) => {\n      const callbackState = instanceStates.get(actorScope.self);\n      if (event.type === XSTATE_STOP) {\n        state = {\n          ...state,\n          status: 'stopped',\n          error: undefined\n        };\n        callbackState.dispose?.();\n        return state;\n      }\n      callbackState.receivers?.forEach(receiver => receiver(event));\n      return state;\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n  return logic;\n}\n\nconst XSTATE_OBSERVABLE_NEXT = 'xstate.observable.next';\nconst XSTATE_OBSERVABLE_ERROR = 'xstate.observable.error';\nconst XSTATE_OBSERVABLE_COMPLETE = 'xstate.observable.complete';\n\n/**\n * Represents an actor created by `fromObservable` or `fromEventObservable`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromObservable, createActor } from 'xstate';\n * import { interval } from 'rxjs';\n *\n * // The type of the value observed by the actor's logic.\n * type Context = number;\n * // The actor's input.\n * type Input = { period?: number };\n *\n * // Actor logic that observes a number incremented every `input.period`\n * // milliseconds (default: 1_000).\n * const logic = fromObservable<Context, Input>(({ input, self }) => {\n *   self;\n *   // ^? ObservableActorRef<Event, Input>\n *\n *   return interval(input.period ?? 1_000);\n * });\n *\n * const actor = createActor(logic, { input: { period: 2_000 } });\n * //    ^? ObservableActorRef<Event, Input>\n * ```\n *\n * @see {@link fromObservable}\n * @see {@link fromEventObservable}\n */\n\n/**\n * Observable actor logic is described by an observable stream of values. Actors\n * created from observable logic (“observable actors”) can:\n *\n * - Emit snapshots of the observable’s emitted value\n *\n * The observable’s emitted value is used as its observable actor’s `context`.\n *\n * Sending events to observable actors will have no effect.\n *\n * @example\n *\n * ```ts\n * import { fromObservable, createActor } from 'xstate';\n * import { interval } from 'rxjs';\n *\n * const logic = fromObservable((obj) => interval(1000));\n *\n * const actor = createActor(logic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot.context);\n * });\n *\n * actor.start();\n * // At every second:\n * // Logs 0\n * // Logs 1\n * // Logs 2\n * // ...\n * ```\n *\n * @param observableCreator A function that creates an observable. It receives\n *   one argument, an object with the following properties:\n *\n *   - `input` - Data that was provided to the observable actor\n *   - `self` - The parent actor\n *   - `system` - The actor system to which the observable actor belongs\n *\n *   It should return a {@link Subscribable}, which is compatible with an RxJS\n *   Observable, although RxJS is not required to create them.\n * @see {@link https://rxjs.dev} for documentation on RxJS Observable and observable creators.\n * @see {@link Subscribable} interface in XState, which is based on and compatible with RxJS Observable.\n */\nfunction fromObservable(observableCreator) {\n  // TODO: add event types\n  const logic = {\n    config: observableCreator,\n    transition: (snapshot, event) => {\n      if (snapshot.status !== 'active') {\n        return snapshot;\n      }\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_NEXT:\n          {\n            const newSnapshot = {\n              ...snapshot,\n              context: event.data\n            };\n            return newSnapshot;\n          }\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...snapshot,\n            status: 'error',\n            error: event.data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...snapshot,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_STOP:\n          snapshot._subscription.unsubscribe();\n          return {\n            ...snapshot,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return snapshot;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state._subscription = observableCreator({\n        input: state.input,\n        system,\n        self,\n        emit\n      }).subscribe({\n        next: value => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_NEXT,\n            data: value\n          });\n        },\n        error: err => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_COMPLETE\n          });\n        }\n      });\n    },\n    getPersistedSnapshot: ({\n      _subscription,\n      ...state\n    }) => state,\n    restoreSnapshot: state => ({\n      ...state,\n      _subscription: undefined\n    })\n  };\n  return logic;\n}\n\n/**\n * Creates event observable logic that listens to an observable that delivers\n * event objects.\n *\n * Event observable actor logic is described by an observable stream of\n * {@link https://stately.ai/docs/transitions#event-objects | event objects}.\n * Actors created from event observable logic (“event observable actors”) can:\n *\n * - Implicitly send events to its parent actor\n * - Emit snapshots of its emitted event objects\n *\n * Sending events to event observable actors will have no effect.\n *\n * @example\n *\n * ```ts\n * import {\n *   fromEventObservable,\n *   Subscribable,\n *   EventObject,\n *   createMachine,\n *   createActor\n * } from 'xstate';\n * import { fromEvent } from 'rxjs';\n *\n * const mouseClickLogic = fromEventObservable(\n *   () => fromEvent(document.body, 'click') as Subscribable<EventObject>\n * );\n *\n * const canvasMachine = createMachine({\n *   invoke: {\n *     // Will send mouse `click` events to the canvas actor\n *     src: mouseClickLogic\n *   }\n * });\n *\n * const canvasActor = createActor(canvasMachine);\n * canvasActor.start();\n * ```\n *\n * @param lazyObservable A function that creates an observable that delivers\n *   event objects. It receives one argument, an object with the following\n *   properties:\n *\n *   - `input` - Data that was provided to the event observable actor\n *   - `self` - The parent actor\n *   - `system` - The actor system to which the event observable actor belongs.\n *\n *   It should return a {@link Subscribable}, which is compatible with an RxJS\n *   Observable, although RxJS is not required to create them.\n */\nfunction fromEventObservable(lazyObservable) {\n  // TODO: event types\n  const logic = {\n    config: lazyObservable,\n    transition: (state, event) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...state,\n            status: 'error',\n            error: event.data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...state,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_STOP:\n          state._subscription.unsubscribe();\n          return {\n            ...state,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return state;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state._subscription = lazyObservable({\n        input: state.input,\n        system,\n        self,\n        emit\n      }).subscribe({\n        next: value => {\n          if (self._parent) {\n            system._relay(self, self._parent, value);\n          }\n        },\n        error: err => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_COMPLETE\n          });\n        }\n      });\n    },\n    getPersistedSnapshot: ({\n      _subscription,\n      ...snapshot\n    }) => snapshot,\n    restoreSnapshot: snapshot => ({\n      ...snapshot,\n      _subscription: undefined\n    })\n  };\n  return logic;\n}\n\nconst XSTATE_PROMISE_RESOLVE = 'xstate.promise.resolve';\nconst XSTATE_PROMISE_REJECT = 'xstate.promise.reject';\n\n/**\n * Represents an actor created by `fromPromise`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromPromise, createActor } from 'xstate';\n *\n * // The actor's resolved output\n * type Output = string;\n * // The actor's input.\n * type Input = { message: string };\n *\n * // Actor logic that fetches the url of an image of a cat saying `input.message`.\n * const logic = fromPromise<Output, Input>(async ({ input, self }) => {\n *   self;\n *   // ^? PromiseActorRef<Output, Input>\n *\n *   const data = await fetch(\n *     `https://cataas.com/cat/says/${input.message}`\n *   );\n *   const url = await data.json();\n *   return url;\n * });\n *\n * const actor = createActor(logic, { input: { message: 'hello world' } });\n * //    ^? PromiseActorRef<Output, Input>\n * ```\n *\n * @see {@link fromPromise}\n */\n\nconst controllerMap = new WeakMap();\n\n/**\n * An actor logic creator which returns promise logic as defined by an async\n * process that resolves or rejects after some time.\n *\n * Actors created from promise actor logic (“promise actors”) can:\n *\n * - Emit the resolved value of the promise\n * - Output the resolved value of the promise\n *\n * Sending events to promise actors will have no effect.\n *\n * @example\n *\n * ```ts\n * const promiseLogic = fromPromise(async () => {\n *   const result = await fetch('https://example.com/...').then((data) =>\n *     data.json()\n *   );\n *\n *   return result;\n * });\n *\n * const promiseActor = createActor(promiseLogic);\n * promiseActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * promiseActor.start();\n * // => {\n * //   output: undefined,\n * //   status: 'active'\n * //   ...\n * // }\n *\n * // After promise resolves\n * // => {\n * //   output: { ... },\n * //   status: 'done',\n * //   ...\n * // }\n * ```\n *\n * @param promiseCreator A function which returns a Promise, and accepts an\n *   object with the following properties:\n *\n *   - `input` - Data that was provided to the promise actor\n *   - `self` - The parent actor of the promise actor\n *   - `system` - The actor system to which the promise actor belongs\n *\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromPromise(promiseCreator) {\n  const logic = {\n    config: promiseCreator,\n    transition: (state, event, scope) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case XSTATE_PROMISE_RESOLVE:\n          {\n            const resolvedValue = event.data;\n            return {\n              ...state,\n              status: 'done',\n              output: resolvedValue,\n              input: undefined\n            };\n          }\n        case XSTATE_PROMISE_REJECT:\n          return {\n            ...state,\n            status: 'error',\n            error: event.data,\n            input: undefined\n          };\n        case XSTATE_STOP:\n          {\n            controllerMap.get(scope.self)?.abort();\n            return {\n              ...state,\n              status: 'stopped',\n              input: undefined\n            };\n          }\n        default:\n          return state;\n      }\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      // TODO: determine how to allow customizing this so that promises\n      // can be restarted if necessary\n      if (state.status !== 'active') {\n        return;\n      }\n      const controller = new AbortController();\n      controllerMap.set(self, controller);\n      const resolvedPromise = Promise.resolve(promiseCreator({\n        input: state.input,\n        system,\n        self,\n        signal: controller.signal,\n        emit\n      }));\n      resolvedPromise.then(response => {\n        if (self.getSnapshot().status !== 'active') {\n          return;\n        }\n        controllerMap.delete(self);\n        system._relay(self, self, {\n          type: XSTATE_PROMISE_RESOLVE,\n          data: response\n        });\n      }, errorData => {\n        if (self.getSnapshot().status !== 'active') {\n          return;\n        }\n        controllerMap.delete(self);\n        system._relay(self, self, {\n          type: XSTATE_PROMISE_REJECT,\n          data: errorData\n        });\n      });\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n  return logic;\n}\n\nconst emptyLogic = fromTransition(_ => undefined, undefined);\nfunction createEmptyActor() {\n  return createActor(emptyLogic);\n}\n\nexport { createEmptyActor, fromCallback, fromEventObservable, fromObservable, fromPromise, fromTransition };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4917, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}